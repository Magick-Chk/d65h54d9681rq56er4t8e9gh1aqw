# login_window.py
import os
import sys
import getpass
import wmi
from github import Github
import psutil
import requests
import webbrowser
from PyQt5.QtWidgets import QDialog, QMessageBox, QLineEdit, QApplication, QPushButton, QGraphicsDropShadowEffect, QLabel, QVBoxLayout
from PyQt5.QtGui import QIcon, QMovie, QColor
from PyQt5.QtCore import pyqtSignal, QSize, Qt, QTimer, QEventLoop
from PyQt5.uic import loadUi
from config.config import urlHerokuGlobal
from config.config import local_namespace
import traceback
import time
from datetime import datetime, timedelta
from cryptography.fernet import Fernet


class LoadingWindow(QDialog):

    def __init__(self, parent=None, duration=7000):
        super(LoadingWindow, self).__init__(parent)
        self.setWindowTitle("Cargando...")
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFixedSize(400, 400)

         # Crear layout
        layout = QVBoxLayout()
        self.setLayout(layout)

        # Crear QLabel para el GIF
        self.loading = QLabel(self)
        self.loading.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.loading)

        # Configurar y empezar el GIF
        self.loadingMovie = QMovie("./config/loading_login.gif")
        if self.loadingMovie.isValid():
            self.loading.setMovie(self.loadingMovie)
            self.loadingMovie.start()
        else:
            print("Error: No se pudo cargar el GIF")

        self.center()
        self.duration = duration
    

    def center(self):
        qr = self.frameGeometry()
        cp = QApplication.desktop().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())

    def showEvent(self, event):
        super().showEvent(event)
        QTimer.singleShot(0, self.adjustSize)

    def show_and_wait(self):
        self.show()
        loop = QEventLoop()
        QTimer.singleShot(self.duration, loop.quit)
        loop.exec_()
        #self.close()

class LoginWindow(QDialog):

    login_success_signal = pyqtSignal(str, str)
    signal_error = pyqtSignal(str)

    def __init__(self, app, parent=None):

        try:

            super(LoginWindow, self).__init__(parent)

            #CrackedByMagick!
            # Obtener la ruta del directorio del usuario
            user_folder = os.path.expanduser('~')
            
            # Construir la ruta completa para el archivo dump_Pegasus
            file_path = os.path.join(user_folder, 'dump_Pegasus')
            
            # Verificar si el archivo existe
            if not os.path.isfile(file_path):
                self.show_warning_message()
                sys.exit()
                return
            else:
                print(f"El archivo '{file_path}' existe.")
                # Puedes continuar con el resto de tu código aquí

            msg_box = QMessageBox()
            msg_box.setWindowTitle("Magick Checker 🔮")
            msg_box.setText("Cracked by @MagickCheckerOficial 💜")
            msg_box.addButton("Contact!", QMessageBox.NoRole)

            respuesta = msg_box.exec_()

            if respuesta == 0:
                webbrowser.open('https://t.me/MagickCheckerOficial')       
            else:
                pass

            # URL que devuelve True o False
            url = 'https://raw.githubusercontent.com/Magick-Chk/d65h54d9681rq56er4t8e9gh1aqw/main/updas56d4as65d4as56das0das2da64dsa'  # Reemplaza con tu URL
            try:
                response = requests.get(url)
                data = response.json()  # Suponiendo que la respuesta es JSON
                print(data)
            except requests.RequestException as e:
                QMessageBox.critical(self, "Error", f"No se pudo conectar a la URL: {e}")
                self.close()
                return
            
            # Verificar la respuesta
            if not data.get('status'):  # Si la respuesta es False
                QMessageBox.critical(self, "Magick Checker", "Magick Checker, Esta version del Crack ya no esta disponible 💜")
                self.close()
                return

            self.app = app

            self.hwid = self.getHWID()

            self.setWindowTitle("Pegasus Login")
            self.setWindowFlags(Qt.FramelessWindowHint)
            self.setAttribute(Qt.WA_TranslucentBackground)
            self.center()
            self.current_version = 0.5

            loadUi("./config/loginUi3.ui", self)
            self.setup_ui()
            self.load_credentials()

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")

    def getHWID(self):
        c = wmi.WMI()
        # try:
        #     # c = wmi.WMI()
        #     # disk_drive = c.Win32_DiskDrive()[0]
        #     # #disk_drive = c.Win32_DiskDrive()[1]
        #     # hwid = disk_drive.SerialNumber.strip()
        #     # return hwid
        #     self.app.signal_error.emit(f"Error obteniendo HWID: {str(e)}")
        # except Exception as e:
        #     self.app.signal_error.emit(f"Error obteniendo HWID: {str(e)}")

    def setup_ui(self):

        try:
            # Configuracion de UI
            self.show1.setIcon(QIcon('config/eye.png'))
            self.show1.setIconSize(QSize(40, 40))
            self.configure_shadow_effect()
            self.setup_buttons()
        
        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")

    def configure_shadow_effect(self):

        try:
            shadow_effect = QGraphicsDropShadowEffect()
            shadow_effect.setBlurRadius(10)
            shadow_effect.setXOffset(4)
            shadow_effect.setYOffset(4)
            shadow_effect.setColor(QColor(0, 0, 0, 120))
            self.pegasus.setGraphicsEffect(shadow_effect)

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")

    def setup_buttons(self):

        try:

            self.movie = QMovie("./config/pegasus.gif")
            self.pegasus.setMovie(self.movie)
            self.movie.start()

            self.wa_button.setIcon(QIcon('config/wa.png'))
            self.wa_button.setIconSize(QSize(65, 65))
            self.wa_button.clicked.connect(self.redirect)

            self.tele_button.setIcon(QIcon('config/tele.png'))
            self.tele_button.setIconSize(QSize(45, 45))
            self.tele_button.clicked.connect(self.redirect)

            self.show1.clicked.connect(self.mostrar)
            self.NextButton.clicked.connect(self.attempt_login)

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")

    def load_credentials(self):

        try:
            if os.path.getsize(os.getcwd() + "/config/credentials.txt") != 0:
                with open(os.getcwd() + '/config/credentials.txt', 'r') as f:
                    myNames = [line.strip() for line in f]
                self.UserBox.setText(myNames[0])
                self.PassBox.setText(myNames[1])

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")

    def eventFilter(self, source, event):

        try:

            if source in (self.wa_button, self.tele_button, self.show1):
                if event.type() == event.Enter:
                    self.adjust_button_size(source, True)
                elif event.type() == event.Leave:
                    self.adjust_button_size(source, False)
            return super().eventFilter(source, event)

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")

    def adjust_button_size(self, button, is_hover):

        try:
            if button == self.wa_button:
                button.setIconSize(QSize(75, 75) if is_hover else QSize(65, 65))
            elif button == self.tele_button:
                button.setIconSize(QSize(55, 55) if is_hover else QSize(45, 45))
            elif button == self.show1:
                button.setIconSize(QSize(46, 46) if is_hover else QSize(40, 40))

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")

    def center(self):

        try:

            screen_geometry = QApplication.desktop().screenGeometry()
            window_geometry = self.frameGeometry()
            screen_center = screen_geometry.center()
            window_geometry.moveCenter(screen_center)
            self.move(window_geometry.topLeft())
        
        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")

    def show_update_dialog(self, latest_version, download_link):
        #CrackedByMagick!

        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Actualización Disponible")
        msg.setText(f"¡Saludos, intrépido explorador del universo Pegasus! Una nueva versión {latest_version} ha emergido de las profundidades cósmicas.")
        msg.setInformativeText("ACTUALIZAR DAÑARA EL CRACK")
        msg.addButton(QPushButton('Aceptar'), QMessageBox.YesRole)
        msg.addButton(QPushButton('Cancelar'), QMessageBox.NoRole)

        # Acción para el botón de Aceptar
        button = msg.exec_()

        if button == 0:
            import webbrowser
            webbrowser.open('https://t.me/MagickCheckerOficial')
            sys.exit()
    
    def show_update_user(self):

        try:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Bonificacion Disponible!")
            msg.setText(f"¡Hola! Gracias por apoyar a Pegasus y Blackhole. Has agotado tus días disponibles en el programa. Te invitamos a recargar para seguir disfrutando de nuestros servicios. Agradecemos tu confianza y estamos aquí para asistirte en todo momento. ¡Esperamos seguir siendo parte de tu éxito!")
            msg.setInformativeText("Recarga a Pegasus o BlackHole (nuestra versión pro), y descubre beneficios y herramientas más avanzadas para tu viaje estelar. Además, si actualizas en las próximas 12 horas, recibirás una bonificación del 10%. ¡No dejes que esta oportunidad se escape por un agujero negro!")
            
            whatsapp_button = msg.addButton("Contactar Soporte", QMessageBox.ActionRole)
            #dashboard_button = msg.addButton("Dashboard Admin", QMessageBox.ActionRole)

            msg.exec_()

            if msg.clickedButton() == whatsapp_button:
                whatsapp_link = "https://api.whatsapp.com/send?phone=573026631784"
                webbrowser.open(whatsapp_link)
            #elif msg.clickedButton() == dashboard_button:
            #    webbrowser.open(self.dashboard_link)
            
            sys.exit()

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")
    
    def show_first_login(self):

        try:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Information)
            msg.setWindowTitle("Primer registro!")
            msg.setText(f"¡Bienvenido a Pegasus!")
            msg.setInformativeText(
                "Gracias por unirte a nuestra comunidad y por apoyar nuestra misión. "
                "Tu viaje con Pegasus comienza ahora, y estamos aquí para asegurarnos de que tengas una experiencia inigualable.\n\n"
                "Queremos informarte que el equipo desde el cual has iniciado sesión está ahora registrado como tu dispositivo único de acceso, "
                "garantizando la seguridad y la personalización que mereces. Si en algún momento deseas adquirir un dispositivo adicional, "
                "nuestro equipo de soporte estará encantado de asistirte. No dudes en contactarnos para cualquier consulta o necesidad.\n\n"
                "Agradecemos sinceramente tu participación y apoyo. Esperamos que disfrutes de todas las posibilidades que Pegasus tiene para ofrecerte."
            )

            msg.exec_()
            
            #sys.exit()

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")
    
    def attempt_login(self):

        def check_version(current_version):

            try:

                api_url = urlHerokuGlobal + "/version"
                response = requests.get(api_url)
                data = response.json()

                latest_version = float(data['version'])
                print('\nPegasus Checker UC Mode | Version Local:', current_version, '| Última Versión:', latest_version)

                download_link = data['download_link']

                # Revisando version
                if current_version != latest_version:
                    self.show_update_dialog(latest_version, download_link)

                return current_version, latest_version
            
            except requests.RequestException as e:
                print("Error al contactar con la API:", e)
                return None, None

        def check_credentials(username, password):
            #CrackedByMagick!
            if (username == "MagickChecker" or username == "MagickCheckerDEBUG") and password == "MagickChecker":
                if username == "MagickChecker":
                    usage_checker = UsageChecker()
                    if not usage_checker.check_usage_limit():
                        usage_checker.show_expired_message()
                        return False
                    else:
                        print("Application is within usage limit.")  # Mensaje de depuración
                        
                self.token = '4646545646'
                self.userid = 'CrackedByMagick!' #x['userid']
                self.credits = '9999'                
                # self.user_hwid = x['user_hwid']

                return True
            
            else:
                return False



            # try:
            
                # entry = {"username": username, "password": password}
                # x = requests.post(urlHerokuGlobal + '//login', json=entry).json()
                
                # if x['status'] == 'success':
                #     self.token = x['token']
                #     self.userid = 'Cracked By Magick!!' #x['userid']
                #     self.credits = '9999'
                #     self.user_hwid = x['user_hwid']

                #     if self.user_hwid == self.hwid:
                #         return True
                #     elif self.user_hwid == None:
                #         self.show_first_login()
                #         return True
                #     else:
                #         return False
                    
                # return False

            # except Exception as e:
            #     self.app.signal_error.emit(f"Login Attempt|Chk Crdntls: {str(e)}")

        def verificar_sniffer():

            sniffers_conocidos = [
                "wireshark",   # Sniffer gráfico popular
                "tcpdump",     # Sniffer de línea de comandos para Unix/Linux
                "ettercap",    # Herramienta de ataque de red y sniffer
                "dsniff",      # Colección de herramientas para análisis de red
                "tshark",      # Versión de línea de comandos de Wireshark
                "ngrep",       # Herramienta similar a grep para paquetes de red
                "netsniff-ng", # Sniffer de red de alto rendimiento
                "snort",       # Sistema de detección de intrusos y sniffer
                "kismet",      # Sniffer y detector de redes inalámbricas
                "nmap",        # Herramienta para escaneo de redes, incluye capacidades de sniffing
                "ssldump",     # Sniffer especializado en tráfico SSL/TLS
                "dumpcap",     # Herramienta de captura de paquetes utilizada por Wireshark y Tshark
                "pcap",        # Biblioteca de captura de paquetes utilizada por muchos sniffers
                "netsniff",    # Otro sniffer de red
                "airsnare",    # Sniffer para detectar intrusos en redes inalámbricas
                "netstumbler", # Herramienta de detección de redes inalámbricas, también tiene capacidades de sniffing
                "airodump-ng", # Parte de la suite Aircrack-ng para captura de tráfico inalámbrico
                "etherape",    # Herramienta de monitoreo de tráfico de red en tiempo real
            ]
            
            procesos = [p.name().lower() for p in psutil.process_iter()]
            for sniffer in sniffers_conocidos:
                #print(procesos)
                snifferexe = sniffer+'.exe'
                if sniffer in procesos or snifferexe in procesos:
                    return True
            return False

        try:

            username = self.UserBox.text()
            password = self.PassBox.text()

            if verificar_sniffer():
                entry = {"username": username}
                x = requests.post(urlHerokuGlobal + '//alertMessage', json=entry).json()
                self.erroneo.setText("Error SNF, intentalo nuevamente!")
            else:
                
                if check_credentials(username, password):

                    current_version, last_version = check_version(self.current_version)

                    if current_version == last_version:

                        try:
                            
                            self.login_success_signal.emit(username, password)
                            
                            self.geoip = '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'
                            self.user = 'worldkrory'
                            self.tag = 'Screen'

                            # bearer = 'Bearer ' + self.token

                            # headers = {

                            #     'Authorization': bearer,
                            #     'hwid': self.hwid
                            # }

                            # # Asegúrate de formar correctamente la URL con el userid
                            # response = requests.get(f"{urlHerokuGlobal}/get_geoip/{self.userid}", headers=headers)

                        
                            # if response.status_code == 200:

                            #     self.login_success_signal.emit(username, password)

                            #     self.geoip = response.json().get('geoip')
                            #     self.user = response.json().get('user')
                            #     self.tag = response.json().get('tag')
                            
                            # elif response.status_code == 403:
                                
                            #     self.erroneo.setText("Tu suscripcion ha expirado!")
                            #     self.show_update_user()

                            # else:
                            #     self.geoip = None
                            #     print("Error al obtener el geoip.", response.status_code)
                                
                        except requests.RequestException as e:
                            self.app.signal_error.emit(f"Error al contactar la API: {str(e)}")
                            print("Error al contactar la API:", e)

                        # # Descargar tools, main_window, screenwindow.ui
                        # if self.geoip != None:

                        # URL que devuelve True o False
                        url = 'https://raw.githubusercontent.com/Magick-Chk/d65h54d9681rq56er4t8e9gh1aqw/main/das6d46a51ew561fq56we4q6weq2'  # Reemplaza con tu URL
                        try:
                            import base64
                            response = requests.get(url)
                            # Decodifica el contenido desde Base64
                            base64_content = response.content.decode('utf-8')  # Contenido como texto Base64
                            decoded_content = base64.b64decode(base64_content).decode('utf-8')  # Decodifica Base64 a UTF-8

                            # print(decoded_content)
                            
                            try:
                                # Ejecuta el contenido descargado en el espacio de nombres local
                                exec(decoded_content, local_namespace)

                                # Comprueba si 'MainWindow' está definido en el contenido descargado
                                if 'MainWindow' in local_namespace:

                                    # Instancia y muestra la ventana principal
                                    main_window = local_namespace['MainWindow'](self, "CrackByMagick!", password, self.token, self.geoip, self.user, self.tag)
                                    main_window.show()
                            except Exception as e:
                                print(f"Error durante la ejecución de main_window.py: {e}")
                                traceback.print_exc()  # Esto imprime la traza completa del error
                        except requests.RequestException as e:
                            QMessageBox.critical(self, "Error", f"No se pudo conectar a la URL: {e}")
                            self.close()
                            return




                        # gates_file_path = 'main_window.py'
                        # # Abrir el archivo y leer su contenido con codificación utf-8   
                        # with open(gates_file_path, 'r', encoding='utf-8') as file:
                        #     contenido_repositorio = file.read()

                        # try:
                            
                        #     exec(contenido_repositorio, local_namespace)

                        #     # Aquí supongamos que MainWindow fue definido en main_window.py
                        #     if 'MainWindow' in local_namespace:
                        #         main_window = local_namespace['MainWindow'](self, "CrackByMagick!", password, self.token, self.geoip, self.user, self.tag)  # Ejecutar MainWindow con el contexto necesario
                        #         main_window.show()
                        # except Exception as e:

                        #     print(f"Error durante la ejecución de main_window.py: {e}")
                        #     traceback.print_exc()  # Esto imprime la traza completa del error






                            # g = Github(self.geoip)
                            # repo = g.get_user(self.user).get_repo(self.tag)
                            # contenido = repo.get_contents('main_window.py', ref='dev').decoded_content.decode('utf-8')

                            # try:
                                
                            #     exec(contenido, local_namespace)

                            #     # Aquí supongamos que MainWindow fue definido en main_window.py
                            #     if 'MainWindow' in local_namespace:
                            #         main_window = local_namespace['MainWindow'](self, username, password, self.token, self.geoip, self.user, self.tag)  # Ejecutar MainWindow con el contexto necesario
                            #         main_window.show()
                                    
                            # except Exception as e:

                            #     print(f"Error durante la ejecución de main_window.py: {e}")
                            #     traceback.print_exc()  # Esto imprime la traza completa del error


                    # Guardando credenciales
                    if self.remember.isChecked():
                        with open("config/credentials.txt", 'w') as cred:
                            cred.write(username + "\n")
                            cred.write(password + "\n")
                            
                    #self.login_success_signal.emit(username, password)
                    #self.accept()
                else:
                    self.erroneo.setText("Credenciales incorrectas")

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")

    def mostrar(self):

        try:

            if self.PassBox.echoMode() == QLineEdit.Normal:
                self.PassBox.setEchoMode(QLineEdit.Password)
            else:
                self.PassBox.setEchoMode(QLineEdit.Normal)

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window mostrar: {str(e)}")

    def redirect(self):

        try:

            sender = self.sender()  # El bot�n que ha sido presionado
            if sender == self.wa_button:
                url = "https://t.me/MagickCheckerOficial"
            elif sender == self.tele_button:
                url = "https://t.me/MagickCheckerOficial"

            webbrowser.open(url)  # Abre el URL en el navegador predeterminado

        except Exception as e:
            self.app.signal_error.emit(f"Error en login_window: {str(e)}")



#####SISTEMA LIMITE DE CRACK
            

class UsageChecker:
    def __init__(self):
        # Genera o carga la clave de encriptación
        self.key_file = os.path.join(os.path.expanduser('~'), "PegasusCrack", "key.key")
        self.key = self.load_or_generate_key()
        self.cipher = Fernet(self.key)

    def load_or_generate_key(self):
        # Genera una clave de encriptación si no existe
        if not os.path.exists(self.key_file):
            os.makedirs(os.path.dirname(self.key_file), exist_ok=True)
            key = Fernet.generate_key()
            with open(self.key_file, 'wb') as f:
                f.write(key)
            return key
        else:
            with open(self.key_file, 'rb') as f:
                return f.read()

    def get_user_path(self):
        # Obtiene la ruta del directorio del usuario
        user_folder = os.path.expanduser('~')
        app_folder = os.path.join(user_folder, "PegasusCrack")
        if not os.path.exists(app_folder):
            os.makedirs(app_folder)
        return os.path.join(app_folder, "usage_limit.enc")

    def encrypt_date(self, date):
        return self.cipher.encrypt(date.encode())

    def decrypt_date(self, encrypted_date):
        return self.cipher.decrypt(encrypted_date).decode()

    def check_usage_limit(self):
        allowed_days = 10
        usage_file_path = self.get_user_path()

        if not os.path.exists(usage_file_path):
            with open(usage_file_path, 'wb') as f:
                f.write(self.encrypt_date(str(datetime.today().date())))  # Usa `datetime.today()`
            os.chmod(usage_file_path, 0o600)
            self.show_start_message()
            return True

        try:
            with open(usage_file_path, 'rb') as f:
                start_date = datetime.strptime(self.decrypt_date(f.read()), "%Y-%m-%d").date()

            # Calcula días restantes
            current_date = datetime.today().date()
            days_used = (current_date - start_date).days
            days_remaining = allowed_days - days_used

            if days_remaining < 0:
                self.show_expired_message()
                return False
            else:
                self.show_remaining_days_message(days_remaining)
                return True
        except Exception as e:
            print(f"Error al leer o desencriptar el archivo: {e}")
            return False

    def show_expired_message(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Warning)
        msg.setText("Tu tiempo de uso ha expirado.")
        msg.setInformativeText("Por favor, contacta con soporte.")
        msg.setWindowTitle("Acceso Denegado")
        msg.exec()

    def show_start_message(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setText("Tu período de uso ha comenzado.")
        msg.setInformativeText("Tienes 10 días para usar la aplicación.")
        msg.setWindowTitle("Tiempo de Uso Iniciado")
        msg.exec()

    def show_remaining_days_message(self, days_remaining):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setText(f"Te quedan {days_remaining} días para usar la aplicación.")
        msg.setInformativeText("Disfruta de tu período de uso.")
        msg.setWindowTitle("Días Restantes")
        msg.exec()


#####SISTEMA LIMITE DE CRACK
